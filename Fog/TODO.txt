LEGEND
[ ] Incomplete
[x] Completed
[w] Working

TODO P1
=======

[ ] Fog/Core:
    [ ] Fog::RegExp - use TRex
    [ ] Fog::String/Fog::Locale - add support for group separators
    [ ] Temporary...<N>::free sometimes not frees the memory ?
    [ ] Complete Fog::BitArray
    [ ] Text Streams (using TextCodec), including err(), out() and in()
    [ ] Logging framework

[w] Fog/Xml:
    [w] XmlWriter

[ ] Fog/Svg:
    [ ] Fix gradient rendering

[ ] Fog/Graphics
    [ ] DPI (horz+vert) class (for svg module and painter)

[ ] Painter:
    [ ] Ability to paint to ARGB32 surface
    [ ] Ability to paint to A8 surface.
    [ ] Set global opacity
    [w] Text transform
    [w] Text over path
    [ ] Patterns transform
        [ ] Linear Gradient Transform
        [ ] Radial Gradient Transform
        [ ] Conical Gradient Transform
    [ ] Introduce setClipPath() / resetClipPath()
    [w] Introduce setColorFilter(), resetColorFilter()
    [w] High-quality downscaling (transformation / scaling down)
    [ ] irect is not used when serializing images using affine transform.
        This rectangle should be also added to pattern (texture).

[ ] Font:
    [w] Ability to render to 'Path'
        [x] Win32
        [w] Freetype2
        [w] Fix it - Kerning, Hinting
    [ ] Cache size control
    [ ] Increase granularity of X position in glyphs to 3 (0.00, 0.33, 0.66), because vector
        fonts can be very sensitive in small sizes.

[ ] RasterEngine:
    [x] Write C composite functions for XRGB32 and PRGB32
    [ ] Write C composite functions for A8
    [ ] Write MMX composite functions for XRGB32 and PRGB32
    [ ] Write MMX composite functions for A8
    [x] Write SSE2 composite functions for XRGB32 and PRGB32
    [ ] Write SSE2 composite functions for A8
    [ ] Specialize CLEAR operator in C implementation (performance TODO)

[ ] Path:
    [ ] Add fitTo(RectF)
    [ ] Add addText(Font, String32) to path
    [ ] What about warp?

[ ] Image filtering:
    [ ] Image filters (Blur, Sharpen, ...) should be grouped and result should be
        ImageFilter class that will be able to do any image based transformations.
    [ ] Each effect should contain opacity value that will define blend factor of
        modified image into source image (this can be used by UI animations).
    [ ] Sharpen
    [ ] Convolve

[ ] Colors:
    [ ] Add ArgbUtil.h, ArgbUtil.cpp and implement here basic compositing (blending, ...)
    [ ] Add rgbToHsv, hsvToRgb

[ ] Region:
    [w] Remove polygon() and round() generators, use Fog::Path() and rasterizer
        instead.
    [w] If Path generator will be implemented, we can implement transform operations.
        (Region to path, path to region)

REFACTORIZATION
===============

[w] All getters (get() methods) should be declared before setters (set() methods)
[w] Make sure that all classes are using correct getXXX() methods
[w] Some methods named clear() should be renamed to reset(), audit this (this not applies to containers, strings, etc...)
[w] All enums and constants should be UPPERCASED.

MORE TODOS:

[w] Improve quality of gradient rendering, current is ok except PAD gradients where it looks really bad
    (unaliased).
[ ] Fix ICO reader (BMP / PNG)
[ ] Add ICO writer (BMP / PNG)
[ ] Add GIF writer, rewrite GIF support
[ ] Fix BMP transparency detection (impossible?)

MORE TODOS:

[ ] Default color in Svg gradient should be 0.0:black, 1.0:white if no stops are provided
[ ] Add innerLimit and innerJoin to painter, paint engine, and all related.

TODO P2
=======

[ ] Add rest of compositing operators (defined by SVG)
    [ ] ColorBurn
    [ ] ColorDodge
    [ ] HardLight
    [ ] SoftLight
    [ ] Overlay
    [ ] Arithmetic, with parameters!

TODO P3 - UI
============

[ ] UI Toolkit
    [ ] Make possibility to set transparent region in widget (not really 
        transparent, but region where the background must be used first).
        Introduce Widget::getPaintMode(), Widget::getBackgroundRegion().
    [ ] Some widgets need to store background in separate buffer (Image).
    [ ] First make basic layouts working and define them

TODO P4 - REFACTOR, OTHERS
==========================

[ ] Image::formatToBytesPerPixel -> Image::getBytesPerPixelFromFormat()

