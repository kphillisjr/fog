// [Fog/Core Library - C++ API]
//
// [Licence] 
// MIT, See COPYING file in package

// [Precompiled headers]
#if defined(FOG_PRECOMP)
#include FOG_PRECOMP
#endif // FOG_PRECOMP

// [Dependencies]
#include <Fog/Core/Assert.h>
#include <Fog/Core/AutoLock.h>
#include <Fog/Core/Error.h>
#include <Fog/Core/Lock.h>
#include <Fog/Core/Math.h>
#include <Fog/Core/Memory.h>
#include <Fog/Core/Static.h>
#include <Fog/Core/String.h>
#include <Fog/Core/StringUtil.h>
#include <Fog/Core/TextCodec.h>
#include <Fog/Core/Thread.h>

#if !defined(FOG_OS_WINDOWS)
// for: nl_langinfo(CODESET)
#include <langinfo.h>
#else
// for: setlocale(LC_ALL, NULL)
#include <locale.h>
#endif

namespace Fog {

// [Fog::TextCodec]
void* TextCodec::sharedBuiltIn[TextCodec::BuiltInCount];

// ============================================================================
// [Fog::TextCodec - Helpers]
// ============================================================================

static sysuint_t TextCodec_addToState(TextCodec::State* state, const uint8_t* cur, const uint8_t* end)
{
  FOG_ASSERT(state);
  FOG_ASSERT(state->count <= 8);

  sysuint_t curSize = state->count;
  sysuint_t bufSize = Math::min((sysuint_t)(end - cur), 8 - curSize);

  memcpy(state->buffer + curSize, cur, bufSize);
  state->count += bufSize;

  return state->count;
}

// TODO: Better default one
static err_t TextCodec_defaultReplacer(String8& dst, Char32 uc)
{
  return dst.set((Char8)'?');
}

// ============================================================================
// [Fog::TextCodec - Device]
// ============================================================================

TextCodec::Device::Device(
  uint32_t _code, uint32_t _flags, const char* _mime, const Page8* _page8)
{
  refCount.init(1);
  code = _code;
  flags = _flags;
  mime = _mime;
  page8 = _page8;
}

TextCodec::Device::~Device()
{
}

// ============================================================================
// [Fog::TextCodec - Device_Null]
// ============================================================================

struct FOG_HIDDEN Device_Null : public TextCodec::Device
{
  Device_Null(uint32_t code, uint32_t flags, const char* mime) : 
    TextCodec::Device(code, flags, mime, NULL)
  {
  }

  virtual err_t appendFromUtf16(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
  {
    return Error::InvalidCodec;
  }

  virtual err_t appendFromUtf32(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
  {
    return Error::InvalidCodec;
  }

  virtual err_t appendToUtf16(
    String16& dst, const void* src, sysuint_t srcBytes, State* state) const
  {
    return Error::InvalidCodec;
  }

  virtual err_t appendToUtf32(
    String32& dst, const void* src, sysuint_t srcBytes, State* state) const
  {
    return Error::InvalidCodec;
  }
};

static TextCodec::Device* Device_Null_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new Device_Null(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - Device_Base]
// ============================================================================

struct FOG_HIDDEN Device_Base : public TextCodec::Device
{
  Device_Base(uint32_t code, uint32_t flags, const char* mime, const Page8* page8);

  virtual err_t appendFromUtf16(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;

  virtual err_t appendToUtf16(
    String16& dst, const void* src, sysuint_t srcBytes, State* state) const;
};

Device_Base::Device_Base(
  uint32_t code, uint32_t flags, const char* mime, const Page8* page8) 
    : Device(code, flags, mime, page8)
{
}

err_t Device_Base::appendFromUtf16(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  // TODO:
  return Error::InvalidCodec;
}

err_t Device_Base::appendToUtf16(
  String16& dst, const void* src, sysuint_t srcBytes, State* state) const
{
  // TODO:
  return Error::InvalidCodec;
}

// ============================================================================
// [Fog::TextCodec - Device_8Bit]
// ============================================================================

static const uint16_t TextCodec_Table_ISO_8859_1[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,
  0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,
  0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,
  0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,
  0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
  0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00c4, 0x00c5, 0x00c6, 0x00c7,
  0x00c8, 0x00c9, 0x00ca, 0x00cb, 0x00cc, 0x00cd, 0x00ce, 0x00cf,
  0x00d0, 0x00d1, 0x00d2, 0x00d3, 0x00d4, 0x00d5, 0x00d6, 0x00d7,
  0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x00dd, 0x00de, 0x00df,
  0x00e0, 0x00e1, 0x00e2, 0x00e3, 0x00e4, 0x00e5, 0x00e6, 0x00e7,
  0x00e8, 0x00e9, 0x00ea, 0x00eb, 0x00ec, 0x00ed, 0x00ee, 0x00ef,
  0x00f0, 0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x00f7,
  0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x00ff
};

static const uint16_t TextCodec_Table_ISO_8859_2[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x02D8, 0x0141, 0x00A4, 0x013D, 0x015A, 0x00A7,
  0x00A8, 0x0160, 0x015E, 0x0164, 0x0179, 0x00AD, 0x017D, 0x017B,
  0x00B0, 0x0105, 0x02DB, 0x0142, 0x00B4, 0x013E, 0x015B, 0x02C7,
  0x00B8, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C,
  0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
  0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
  0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
  0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
  0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
  0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
};

static const uint16_t TextCodec_Table_ISO_8859_3[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0126, 0x02D8, 0x00A3, 0x00A4, 0xFFFD, 0x0124, 0x00A7,
  0x00A8, 0x0130, 0x015E, 0x011E, 0x0134, 0x00AD, 0xFFFD, 0x017B,
  0x00B0, 0x0127, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x0125, 0x00B7,
  0x00B8, 0x0131, 0x015F, 0x011F, 0x0135, 0x00BD, 0xFFFD, 0x017C,
  0x00C0, 0x00C1, 0x00C2, 0xFFFD, 0x00C4, 0x010A, 0x0108, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0xFFFD, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x0120, 0x00D6, 0x00D7,
  0x011C, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x016C, 0x015C, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0xFFFD, 0x00E4, 0x010B, 0x0109, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0xFFFD, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x0121, 0x00F6, 0x00F7,
  0x011D, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x016D, 0x015D, 0x02D9
};

static const uint16_t TextCodec_Table_ISO_8859_4[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x0138, 0x0156, 0x00A4, 0x0128, 0x013B, 0x00A7,
  0x00A8, 0x0160, 0x0112, 0x0122, 0x0166, 0x00AD, 0x017D, 0x00AF,
  0x00B0, 0x0105, 0x02DB, 0x0157, 0x00B4, 0x0129, 0x013C, 0x02C7,
  0x00B8, 0x0161, 0x0113, 0x0123, 0x0167, 0x014A, 0x017E, 0x014B,
  0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x012A,
  0x0110, 0x0145, 0x014C, 0x0136, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x0168, 0x016A, 0x00DF,
  0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x012B,
  0x0111, 0x0146, 0x014D, 0x0137, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x0169, 0x016B, 0x02D9
};

static const uint16_t TextCodec_Table_ISO_8859_5[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407,
  0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F,
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
  0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457,
  0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00A7, 0x045E, 0x045F
};

static const uint16_t TextCodec_Table_ISO_8859_6[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0xFFFD, 0xFFFD, 0xFFFD, 0x00A4, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x060C, 0x00AD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0x061B, 0xFFFD, 0xFFFD, 0xFFFD, 0x061F,
  0xFFFD, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
  0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
  0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637,
  0x0638, 0x0639, 0x063A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647,
  0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F,
  0x0650, 0x0651, 0x0652, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_7[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x2018, 0x2019, 0x00A3, 0xFFFD, 0xFFFD, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0xFFFD, 0x00AB, 0x00AC, 0x00AD, 0xFFFD, 0x2015,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x0385, 0x0386, 0x00B7,
  0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
  0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
  0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
  0x03A0, 0x03A1, 0xFFFD, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
  0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
  0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
  0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
  0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
  0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_8[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0xFFFD, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x203E,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2017,
  0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
  0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
  0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
  0x05E8, 0x05E9, 0x05EA, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_9[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
};

static const uint16_t TextCodec_Table_ISO_8859_10[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x0112, 0x0122, 0x012A, 0x0128, 0x0136, 0x00A7,
  0x013B, 0x0110, 0x0160, 0x0166, 0x017D, 0x00AD, 0x016A, 0x014A,
  0x00B0, 0x0105, 0x0113, 0x0123, 0x012B, 0x0129, 0x0137, 0x00B7,
  0x013C, 0x0111, 0x0161, 0x0167, 0x017E, 0x2015, 0x016B, 0x014B,
  0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x00CF,
  0x00D0, 0x0145, 0x014C, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x0168,
  0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
  0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x00EF,
  0x00F0, 0x0146, 0x014D, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x0169,
  0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x0138
};

static const uint16_t TextCodec_Table_ISO_8859_11[128] =
{
  0x20AC, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2026, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
  0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
  0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
  0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
  0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
  0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
  0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
  0x0E38, 0x0E39, 0x0E3A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x0E3F,
  0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
  0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
  0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
  0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_13[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7,
  0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7,
  0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
  0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
  0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
  0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
  0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
  0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
  0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
  0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
  0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019
};

static const uint16_t TextCodec_Table_ISO_8859_14[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x1E02, 0x1E03, 0x00A3, 0x010A, 0x010B, 0x1E0A, 0x00A7,
  0x1E80, 0x00A9, 0x1E82, 0x1E0B, 0x1EF2, 0x00AD, 0x00AE, 0x0178,
  0x1E1E, 0x1E1F, 0x0120, 0x0121, 0x1E40, 0x1E41, 0x00B6, 0x1E56,
  0x1E81, 0x1E57, 0x1E83, 0x1E60, 0x1EF3, 0x1E84, 0x1E85, 0x1E61,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x0174, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x1E6A,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x0176, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x0175, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x1E6B,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x0177, 0x00FF
};

static const uint16_t TextCodec_Table_ISO_8859_16[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x0105, 0x0141, 0x20AC, 0x201E, 0x0160, 0x00A7,
  0x0161, 0x00A9, 0x0218, 0x00AB, 0x0179, 0x00AD, 0x017A, 0x017B,
  0x00B0, 0x00B1, 0x010C, 0x0142, 0x017D, 0x201D, 0x00B6, 0x00B7,
  0x017E, 0x010D, 0x0219, 0x00BB, 0x0152, 0x0153, 0x0178, 0x017C,
  0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0106, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x0110, 0x0143, 0x00D2, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x015A,
  0x0170, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0118, 0x021A, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x0107, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x0111, 0x0144, 0x00F2, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x015B,
  0x0171, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0119, 0x021B, 0x00FF
};

static const uint16_t TextCodec_Table_CP_850[128] =
{
  0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
  0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
  0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
  0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
  0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
  0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
  0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
  0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
  0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
  0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
  0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE,
  0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
  0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
  0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
  0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
  0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};

static const uint16_t TextCodec_Table_CP_866[128] =
{
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
  0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
  0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
  0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
  0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
  0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
  0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
  0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E,
  0x00B0, 0x2219, 0x00B7, 0x221A, 0x2116, 0x00A4, 0x25A0, 0x00A0
};

static const uint16_t TextCodec_Table_CP_874[128] =
{
  0x20AC, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2026, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
  0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
  0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
  0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
  0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
  0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
  0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
  0x0E38, 0x0E39, 0x0E3A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x0E3F,
  0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
  0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
  0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
  0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_CP_1250[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0xFFFD, 0x201E, 0x2026, 0x2020, 0x2021,
  0xFFFD, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
  0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
  0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
  0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
  0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
  0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
  0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
  0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
  0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
};

static const uint16_t TextCodec_Table_CP_1251[128] =
{
  0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
  0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
  0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
  0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
  0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
  0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
  0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
};

static const uint16_t TextCodec_Table_CP_1252[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0xFFFD, 0x017D, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0xFFFD, 0x017E, 0x0178,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

static const uint16_t TextCodec_Table_CP_1253[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0xFFFD, 0x2030, 0xFFFD, 0x2039, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0xFFFD, 0x203A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x0385, 0x0386, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0xFFFD, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x2015,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x00B5, 0x00B6, 0x00B7,
  0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
  0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
  0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
  0x03A0, 0x03A1, 0xFFFD, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
  0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
  0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
  0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
  0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
  0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0xFFFD
};

static const uint16_t TextCodec_Table_CP_1254[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0xFFFD, 0xFFFD, 0x0178,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
};

static const uint16_t TextCodec_Table_CP_1255[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0xFFFD, 0x2039, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0xFFFD, 0x203A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x20AA, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7,
  0x05B8, 0x05B9, 0xFFFD, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF,
  0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05F0, 0x05F1, 0x05F2, 0x05F3,
  0x05F4, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
  0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
  0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
  0x05E8, 0x05E9, 0x05EA, 0xFFFD, 0xFFFD, 0x200E, 0x200F, 0xFFFD
};

static const uint16_t TextCodec_Table_CP_1256[128] =
{
  0x20AC, 0x067E, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0x0679, 0x2039, 0x0152, 0x0686, 0x0698, 0x0688,
  0x06AF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x06A9, 0x2122, 0x0691, 0x203A, 0x0153, 0x200C, 0x200D, 0x06BA,
  0x00A0, 0x060C, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x06BE, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x061B, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x061F,
  0x06C1, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
  0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
  0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00D7,
  0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0641, 0x0642, 0x0643,
  0x00E0, 0x0644, 0x00E2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0649, 0x064A, 0x00EE, 0x00EF,
  0x064B, 0x064C, 0x064D, 0x064E, 0x00F4, 0x064F, 0x0650, 0x00F7,
  0x0651, 0x00F9, 0x0652, 0x00FB, 0x00FC, 0x200E, 0x200F, 0x06D2
};

static const uint16_t TextCodec_Table_CP_1257[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0xFFFD, 0x201E, 0x2026, 0x2020, 0x2021,
  0xFFFD, 0x2030, 0xFFFD, 0x2039, 0xFFFD, 0x00A8, 0x02C7, 0x00B8,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0xFFFD, 0x203A, 0xFFFD, 0x00AF, 0x02DB, 0xFFFD,
  0x00A0, 0xFFFD, 0x00A2, 0x00A3, 0x00A4, 0xFFFD, 0x00A6, 0x00A7,
  0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
  0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
  0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
  0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
  0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
  0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
  0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
  0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
  0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9
};

static const uint16_t TextCodec_Table_CP_1258[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0xFFFD, 0x2039, 0x0152, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0xFFFD, 0x203A, 0x0153, 0xFFFD, 0xFFFD, 0x0178,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x0300, 0x00CD, 0x00CE, 0x00CF,
  0x0110, 0x00D1, 0x0309, 0x00D3, 0x00D4, 0x01A0, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x01AF, 0x0303, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0301, 0x00ED, 0x00EE, 0x00EF,
  0x0111, 0x00F1, 0x0323, 0x00F3, 0x00F4, 0x01A1, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x01B0, 0x20AB, 0x00FF
};

static const uint16_t TextCodec_Table_APPLE_ROMAN[128] =
{
  0x00C4, 0x00C5, 0x00C7, 0x00C9, 0x00D1, 0x00D6, 0x00DC, 0x00E1,
  0x00E0, 0x00E2, 0x00E4, 0x00E3, 0x00E5, 0x00E7, 0x00E9, 0x00E8,
  0x00EA, 0x00EB, 0x00ED, 0x00EC, 0x00EE, 0x00EF, 0x00F1, 0x00F3,
  0x00F2, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x00F9, 0x00FB, 0x00FC,
  0x2020, 0x00B0, 0x00A2, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF,
  0x00AE, 0x00A9, 0x2122, 0x00B4, 0x00A8, 0x2260, 0x00C6, 0x00D8,
  0x221E, 0x00B1, 0x2264, 0x2265, 0x00A5, 0x00B5, 0x2202, 0x2211,
  0x220F, 0x03C0, 0x222B, 0x00AA, 0x00BA, 0x03A9, 0x00E6, 0x00F8,
  0x00BF, 0x00A1, 0x00AC, 0x221A, 0x0192, 0x2248, 0x2206, 0x00AB,
  0x00BB, 0x2026, 0x00A0, 0x00C0, 0x00C3, 0x00D5, 0x0152, 0x0153,
  0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA,
  0x00FF, 0x0178, 0x2044, 0x20AC, 0x2039, 0x203A, 0xFB01, 0xFB02,
  0x2021, 0x00B7, 0x201A, 0x201E, 0x2030, 0x00C2, 0x00CA, 0x00C1,
  0x00CB, 0x00C8, 0x00CD, 0x00CE, 0x00CF, 0x00CC, 0x00D3, 0x00D4,
  0xF8FF, 0x00D2, 0x00DA, 0x00DB, 0x00D9, 0x0131, 0x02C6, 0x02DC,
  0x00AF, 0x02D8, 0x02D9, 0x02DA, 0x00B8, 0x02DD, 0x02DB, 0x02C7
};

static const uint16_t TextCodec_Table_KOI8R[128] =
{
  0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524,
  0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
  0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219 /* or 0x2022 ? */, 0x221A, 0x2248,
  0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
  0x2550, 0x2551, 0x2552, 0x0451, 0x2553, 0x2554, 0x2555, 0x2556,
  0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x255C, 0x255D, 0x255E,
  0x255F, 0x2560, 0x2561, 0x0401, 0x2562, 0x2563, 0x2564, 0x2565,
  0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x256B, 0x256C, 0x00A9,
  0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
  0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
  0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432,
  0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A,
  0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
  0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
  0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412,
  0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A
};

static const uint16_t TextCodec_Table_KOI8U[128] =
{
  0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524,
  0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
  0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219, 0x221A, 0x2248,
  0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
  0x2550, 0x2551, 0x2552, 0x0451, 0x0454, 0x2554, 0x0456, 0x0457,
  0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x0491, 0x255D, 0x255E,
  0x255F, 0x2560, 0x2561, 0x0401, 0x0404, 0x2563, 0x0406, 0x0407,
  0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x0490, 0x256C, 0x00A9,
  0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
  0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
  0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432,
  0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A,
  0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
  0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
  0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412,
  0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A
};

static const uint16_t TextCodec_Table_WINSAMI_2[128] =
{
  0x20AC, 0xFFFD, 0x010C, 0x0192, 0x010D, 0x01B7, 0x0292, 0x01EE,
  0x01EF, 0x0110, 0x0160, 0x2039, 0x0152, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x0111, 0x01E6, 0x0161, 0x203A, 0x0153, 0xFFFD, 0xFFFD, 0x0178,
  0x00A0, 0x01E7, 0x01E4, 0x00A3, 0x00A4, 0x01E5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x021E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x021F,
  0x00B0, 0x00B1, 0x01E8, 0x01E9, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x014A, 0x014B, 0x0166, 0x00BB, 0x0167, 0x00BD, 0x017D, 0x017E,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

static const uint16_t TextCodec_Table_ROMAN_8[128] =
{
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x00C0, 0x00C2, 0x00C8, 0x00CA, 0x00CB, 0x00CE, 0x00CF,
  0x00B4, 0x02CB, 0x02C6, 0x00A8, 0x02DC, 0x00D9, 0x00DB, 0x20A4,
  0x00AF, 0x00DD, 0x00FD, 0x00B0, 0x00C7, 0x00E7, 0x00D1, 0x00F1,
  0x00A1, 0x00BF, 0x00A4, 0x00A3, 0x00A5, 0x00A7, 0x0192, 0x00A2,
  0x00E2, 0x00EA, 0x00F4, 0x00FB, 0x00E1, 0x00E9, 0x00F3, 0x00FA,
  0x00E0, 0x00E8, 0x00F2, 0x00F9, 0x00E4, 0x00EB, 0x00F6, 0x00FC,
  0x00C5, 0x00EE, 0x00D8, 0x00C6, 0x00E5, 0x00ED, 0x00F8, 0x00E6,
  0x00C4, 0x00EC, 0x00D6, 0x00DC, 0x00C9, 0x00EF, 0x00DF, 0x00D4,
  0x00C1, 0x00C3, 0x00E3, 0x00D0, 0x00F0, 0x00CD, 0x00CC, 0x00D3,
  0x00D2, 0x00D5, 0x00F5, 0x0160, 0x0161, 0x00DA, 0x0178, 0x00FF,
  0x00DE, 0x00FE, 0x00B7, 0x00B5, 0x00B6, 0x00BE, 0x2014, 0x00BC,
  0x00BD, 0x00AA, 0x00BA, 0x00AB, 0x25A0, 0x00BB, 0x00B1, 0xFFFD
};

static const uint16_t TextCodec_Table_ARMSCII_8[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,
  0x00a0, 0xf0a1, 0x00a7, 0x0589, 0x0029, 0x0028, 0x00bb, 0x00ab,
  0x2014, 0x002e, 0x055d, 0x002c, 0x2010, 0x058a, 0x2026, 0x055c,
  0x055b, 0x055e, 0x0531, 0x0561, 0x0532, 0x0562, 0x0533, 0x0563,
  0x0534, 0x0564, 0x0535, 0x0565, 0x0536, 0x0566, 0x0537, 0x0567,
  0x0538, 0x0568, 0x0539, 0x0569, 0x053a, 0x056a, 0x053b, 0x056b,
  0x053c, 0x056c, 0x053d, 0x056d, 0x053e, 0x056e, 0x053f, 0x056f,
  0x0540, 0x0570, 0x0541, 0x0571, 0x0542, 0x0572, 0x0543, 0x0573,
  0x0544, 0x0574, 0x0545, 0x0575, 0x0546, 0x0576, 0x0547, 0x0577,
  0x0548, 0x0578, 0x0549, 0x0579, 0x054a, 0x057a, 0x054b, 0x057b,
  0x054c, 0x057c, 0x054d, 0x057d, 0x054e, 0x057e, 0x054f, 0x057f,
  0x0550, 0x0580, 0x0551, 0x0581, 0x0552, 0x0582, 0x0553, 0x0583,
  0x0554, 0x0584, 0x0555, 0x0585, 0x0556, 0x0586, 0x02bc, 0x0587
};

static const uint16_t TextCodec_Table_GEORGIAN_ACADEMY[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,
  0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,
  0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,
  0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,
  0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
  0x10d0, 0x10d1, 0x10d2, 0x10d3, 0x10d4, 0x10d5, 0x10d6, 0x10d7,
  0x10d8, 0x10d9, 0x10da, 0x10db, 0x10dc, 0x10dd, 0x10de, 0x10df,
  0x10e0, 0x10e1, 0x10e2, 0x10e3, 0x10e4, 0x10e5, 0x10e6, 0x10e7,
  0x10e8, 0x10e9, 0x10ea, 0x10eb, 0x10ec, 0x10ed, 0x10ee, 0x10ef,
  0x10f0, 0x10f1, 0x10f2, 0x10f3, 0x10f4, 0x10f5, 0x10f6, 0x00ab,
  0x00bb, 0x2018, 0x2019, 0x201e, 0x201f, 0x00dd, 0x00de, 0x00df,
  0x00f0, 0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x00f7,
  0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x00ff
};

static const uint16_t TextCodec_Table_GEORGIAN_PS[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,
  0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,
  0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,
  0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,
  0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,
  0x10d0, 0x10d1, 0x10d2, 0x10d3, 0x10d4, 0x10d5, 0x10d6, 0x10f1,
  0x10d7, 0x10d8, 0x10d9, 0x10da, 0x10db, 0x10dc, 0x10f2, 0x10dd,
  0x10de, 0x10df, 0x10e0, 0x10e1, 0x10e2, 0x10f3, 0x10e3, 0x10e4,
  0x10e5, 0x10e6, 0x10e7, 0x10e8, 0x10e9, 0x10ea, 0x10eb, 0x10ec,
  0x10ed, 0x10ee, 0x10f4, 0x10ef, 0x10f0, 0x10f5, 0x10f6, 0x00ab,
  0x00bb, 0x2018, 0x2019, 0x201e, 0x201f, 0x00dd, 0x00de, 0x00df,
  0x00f0, 0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x00f7,
  0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x00ff
};

static const TextCodec::Page8::Decode Device_8Bit_emptyDecoder =
{
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
};

struct FOG_HIDDEN Device_8Bit : public Device_Base
{
  Device_8Bit(uint32_t code, uint32_t flags, const char* mime, const Page8* page8);
  virtual ~Device_8Bit();

  virtual err_t appendFromUtf32(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;
  virtual err_t appendToUtf32(
    String32& dst, const void* src, sysuint_t srcBytes, State* state) const;
};

Device_8Bit::Device_8Bit(
  uint32_t code, uint32_t flags, const char* mime, const Page8* page8) 
    : Device_Base(code, flags, mime, page8)
{
}

Device_8Bit::~Device_8Bit()
{
  if (page8)
  {
    TextCodec::Page8::Decode* const* tables = page8->decode;

    for (sysuint_t i = 0; i != 256; i++)
    {
      if (tables[i] != &Device_8Bit_emptyDecoder) Memory::free(tables[i]);
    }

    Memory::free((void*)page8);
  }
}

err_t Device_8Bit::appendFromUtf32(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char32*)src) << 2;

  const uint8_t* srcCur = (const uint8_t*)src;
  const uint8_t* srcEnd = (const uint8_t*)srcCur + srcBytes;
  const uint8_t* srcEndMinus3 = srcEnd - 3;

  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = ((srcBytes) >> 2) + 1;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  uint8_t* dstCur = (uint8_t*)dst.xData() + dst.length();
  uint8_t* dstEnd = (uint8_t*)dst.xData() + dst.capacity();

  // Replacements
  if (replacer == NULL) replacer = TextCodec_defaultReplacer;

  // Characters
  uint32_t uc;
  uint8_t ch;

  // 8 bit tables
  TextCodec::Page8::Decode* const* table = page8->decode;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return Error::IncompleteInput.
    if (FOG_UNLIKELY(bufSize < 4)) return Error::Ok;

    srcCur -= oldStateSize;
    state->count = 0;

    uc = *(const uint32_t*)bufPtr;
    goto code;
  }

  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus3)) goto inputTruncated;

    uc = *(const uint32_t*)srcCur;
code:
    if (uc >= 0xFFFF) goto replace;

    ch = table[uc >> 8]->uc[uc & 0xFF];
    if (FOG_UNLIKELY(ch == 0) && uc != 0) goto replace;

    *dstCur++ = ch;

cont:
    srcCur += 4;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }
  goto end;

inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else
  {
    err = Error::InputTruncated;
  }
  goto end;

replace:
  dst.xFinalize((Char8*)dstCur);

  err = replacer(dst, Char32(uc));
  if (err) return err;

  growSize = (sysuint_t)(srcEnd - srcCur);
  if (dst.capacity() - dst.length() < growSize)
  {
    err = dst.reserve(dst.length() + growSize);
    if (err) return err;
  }
 
  dstCur = (uint8_t*)dst.xData() + dst.length();
  dstEnd = (uint8_t*)dst.xData() + dst.capacity();
  goto cont;

end:
  dst.xFinalize((char*)dstCur);
  return err;
}

err_t Device_8Bit::appendToUtf32(
  String32& dst, const void* src, sysuint_t srcBytes, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = strlen((const char*)(src));

  const uint8_t* srcCur = (uint8_t*)(src);
  const uint8_t* srcEnd = srcCur + (srcBytes);

  // Destination Buffer
  sysuint_t growSize = srcBytes + 1;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  Char32* dstCur = dst.xData() + dst.length();
  Char32* dstEnd = dst.xData() + dst.capacity();

  // Characters
  uint32_t uc;

  // 8 bit tables
  const TextCodec::Page8::Encode* table = page8->encode;
 
  for (;;)
  {
    uc = *srcCur++;
    if (FOG_UNLIKELY(uc >= 128)) uc = table->uc[uc-128];
    *dstCur++ = uc;
    if (srcCur == srcEnd) break;
  }
 
  dst.xFinalize(dstCur);
  return err;
}

static TextCodec::Device* Device_8Bit_create(uint32_t code, uint32_t flags, const char* mime, void* table)
{
  TextCodec::Page8* page8  = 
    (TextCodec::Page8 *)Memory::xalloc(sizeof(TextCodec::Page8));
  const uint16_t* encode = (const uint16_t*)table;

  page8->encode = (TextCodec::Page8::Encode*)encode;

  sysuint_t i;

  for (i = 0; i != 256; i++)
  {
    page8->decode[i] = (TextCodec::Page8::Decode*)&Device_8Bit_emptyDecoder;
  }

  for (i = 0; i != 256; i++)
  {
    uint32_t uc = (i < 128) ? i : encode[i-128];
    uint32_t ucPage = uc >> 8;
    uint32_t ucIndex = uc & 0xFF;

    TextCodec::Page8::Decode* decode = 
      (TextCodec::Page8::Decode*)page8->decode[ucPage];

    if (decode == &Device_8Bit_emptyDecoder)
    {
      page8->decode[ucPage] = decode = (TextCodec::Page8::Decode *)
        Memory::xcalloc(sizeof(TextCodec::Page8::Decode));
    }

    decode->uc[ucIndex] = (uint8_t)i;
  }

  return new Device_8Bit(code, flags, mime, page8);
}

// ---------------------------------------------------------------------------
// [Fog::TextCodec - Device_UTF8]
// ---------------------------------------------------------------------------

struct FOG_HIDDEN Device_UTF8 : public Device_Base
{
  Device_UTF8(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUtf32(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;
  virtual err_t appendToUtf32(
    String32& dst, const void* src, sysuint_t srcBytes, State* state) const;
};

Device_UTF8::Device_UTF8(uint32_t code, uint32_t flags, const char* mime) :
  Device_Base(code, flags, mime, NULL)
{
}

err_t Device_UTF8::appendFromUtf32(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char32*)src) << 2;

  const uint8_t* srcCur = (const uint8_t*)src;
  const uint8_t* srcEnd = (const uint8_t*)srcCur + srcBytes;
  const uint8_t* srcEndMinus3 = srcEnd - 3;

  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = srcBytes + 4;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  uint8_t* dstCur = (uint8_t*)dst.xData() + dst.length();
  uint8_t* dstEnd = (uint8_t*)dst.xData() + dst.capacity();

  // Characters
  uint32_t uc;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::IncompleteInput.
    if (FOG_UNLIKELY(bufSize < 4)) return Error::Ok;

    srcCur -= oldStateSize;
    state->count = 0;

    uc = *(const uint32_t*)bufPtr;
    goto code;
  }

  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus3)) goto inputTruncated;

    uc = *(const uint32_t*)srcCur;
code:
    if (FOG_LIKELY(uc < 0x80))
    {
      *dstCur++ = uint8_t(uc);
    }
    else if (uc < 0x800)
    {
      dstCur[1] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0xC0;
      dstCur[0] = uc;
      dstCur += 2;
    }
    else if (uc < 0x10000)
    {
      dstCur[2] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0x800;
      dstCur[1] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0xC0;
      dstCur[0] = uc;
      dstCur += 3;
    }
    else if (uc < 0x200000)
    {
      dstCur[3] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0x10000;
      dstCur[2] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0x800;
      dstCur[1] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0xC0;
      dstCur[0] = uc;
      dstCur += 4;
    }
    // Illegal
    else
    {
      goto invalidInput;
    }

cont:
    srcCur += 4;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }

  goto end;

invalidInput:
  err = Error::InvalidUnicode;
  goto end;

inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else
  {
    err = Error::InputTruncated;
  }

end:
  dst.xFinalize((char*)dstCur);
  return err;
}

err_t Device_UTF8::appendToUtf32(
  String32& dst, const void* src, sysuint_t srcBytes, State* state) const
{
#define TEXTCODEC_DEVICE_UTF8_GET_CHAR(__buffer__) \
  switch (utf8Size) \
  { \
    /* Invalid UTF-8 Sequence */ \
    case 0: \
      goto invalidInput; \
    case 1: \
      break; \
    case 2: \
      uc = ((uc - 192U) << 6U) \
         | (uint32_t((__buffer__)[1]) - 128U); \
      break; \
    case 3: \
      /* Remove UTF8-BOM (EFBBBF) - We don't want it */ \
      if (uc == 0xEF && (__buffer__)[1] == 0xBB && (__buffer__)[2] == 0xBF) goto cont; \
      \
      uc = ((uc - 224U) << 12U) \
         | ((uint32_t((__buffer__)[1]) - 128U) << 6) \
         |  (uint32_t((__buffer__)[2]) - 128U); \
      break; \
    case 4: \
      uc = ((uc - 240U) << 24U) \
         | ((uint32_t((__buffer__)[1]) - 128U) << 12) \
         | ((uint32_t((__buffer__)[2]) - 128U) << 6) \
         |  (uint32_t((__buffer__)[3]) - 128U); \
      break; \
    default: \
      FOG_ASSERT_NOT_REACHED(); \
  }

  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = strlen((const char*)(src));
 
  const uint8_t* srcCur = (uint8_t*)(src);
  const uint8_t* srcEnd = srcCur + (srcBytes);

  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t utf8Size;
  sysuint_t growSize = srcBytes + 1;
 
  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  Char32* dstCur = dst.xData() + dst.length();
  Char32* dstEnd = dst.xData() + dst.capacity();

  // Characters
  uint32_t uc;
 
  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    uc = *bufPtr;
    utf8Size = utf8LengthTable[uc];

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::CharactersLoss.
    if (FOG_UNLIKELY(bufSize < utf8Size)) return Error::Ok;

    srcCur -= oldStateSize;
    state->count = 0;

    TEXTCODEC_DEVICE_UTF8_GET_CHAR(bufPtr);
    goto code;
  }
 
loop:
  for (;;)
  {
    uc = *srcCur;
    utf8Size = utf8LengthTable[uc];
   
    // Incomplete Input
    if (FOG_UNLIKELY((sysuint_t)(srcEnd - srcCur) < utf8Size)) goto inputTruncated;

    TEXTCODEC_DEVICE_UTF8_GET_CHAR(srcCur);
   
code:
    *dstCur++ = uc;
   
cont:
    srcCur += utf8Size;
    if (srcCur == srcEnd) break;
  }
 
  goto end;
 
invalidInput:
  err = Error::InvalidUtf8;
  goto end;
 
inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else
  {
    err = Error::InputTruncated;
  }

end:
  dst.xFinalize(dstCur);
  return err;

#undef TEXTCODEC_DEVICE_UTF8_GET_CHAR
}

static TextCodec::Device* Device_UTF8_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new Device_UTF8(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - Device_UTF16]
// ============================================================================

struct FOG_HIDDEN Device_UTF16 : public Device_Base
{
  Device_UTF16(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUtf16(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;
  virtual err_t appendToUtf16(
    String16& dst, const void* src, sysuint_t srcBytes, State* state) const;

  virtual err_t appendFromUtf32(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;
  virtual err_t appendToUtf32(
    String32& dst, const void* src, sysuint_t srcBytes, State* state) const;
};

Device_UTF16::Device_UTF16(uint32_t code, uint32_t flags, const char* mime) :
  Device_Base(code, flags, mime, NULL)
{
}

err_t Device_UTF16::appendFromUtf16(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char16*)src) << 1;

  // Source Buffer
  const uint8_t* srcCur = (const uint8_t*)src;
  const uint8_t* srcEnd = (const uint8_t*)srcCur + srcBytes;
  const uint8_t* srcEndMinus1 = srcEnd - 1;

  // Destination Buffer
  sysuint_t oldDestLength = dst.length();
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = srcBytes + 4;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  uint16_t* dstCur = (uint16_t*)dst.xData() + dst.length();
  uint16_t* dstEnd = (uint16_t*)dst.xData() + dst.capacity();

  // Characters
  uint16_t uc0 = 0;
  uint16_t uc1;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::IncompleteInput.
    if (FOG_UNLIKELY(bufSize < 2)) return Error::Ok;

    srcCur -= oldStateSize;
    state->count = 0;

    uc1 = *(const uint16_t*)bufPtr;
    goto code;
  }

  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus1)) goto inputTruncated;

    uc1 = *(const uint16_t*)srcCur;
code:
    // Surrogate
    if (uc0)
    {
      if (!Char16::isTrailSurrogate(uc1)) goto invalidInput;

      *dstCur++ = uc0;
      *dstCur++ = uc1;
      uc0 = 0;
    }
    else if (Char16::isLeadSurrogate(uc1))
    {
      uc0 = uc1;
    }
    else
    {
      *dstCur++ = uc1;
    }

cont:
    srcCur += 2;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }

  // Incomplete
  if (uc0)
  {
    if (state)
    {
      ((uint16_t*)state->buffer)[0] = uc0;
      state->count = 2;
    }
    else
    {
      err = Error::InputTruncated;
    }
  }

  goto end;

invalidInput:
  err = Error::InvalidUnicode;
  goto end;

inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = 0;
    if (uc0) { ((uint16_t*)state->buffer)[0] = uc0; bufSize += 2; }
    state->buffer[bufSize] = *srcCur;
    state->count = bufSize+1;
  }
  else
  {
    err = Error::InputTruncated;
  }

end:
  dst.xFinalize((char*)dstCur);

  // Byteswap
  if (flags & TextCodec::IsByteSwapped)
  {
    dstCur = (uint16_t *)(dst.xData() + oldDestLength);
    dstEnd = (uint16_t *)(dst.xData() + dst.length());

    while (dstCur < dstEnd) *dstCur++ = Memory::bswap16(*dstCur);
  }

  return err;
}

err_t Device_UTF16::appendToUtf16(
  String16& dst, const void* src, sysuint_t srcBytes, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char16*)(src)) << 1;
 
  const uint8_t* srcCur = (uint8_t*)(src);
  const uint8_t* srcEnd = srcCur + (srcBytes);
 
  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (srcBytes >> 1) + 2;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  Char16* dstCur = dst.xData() + dst.length(); 
  Char16* dstEnd = dst.xData() + dst.capacity();

  // Characters
  uint16_t uc16_0;
  uint16_t uc16_1;
 
  // Byteswap
  uint32_t byteSwap = state 
    ? state->bomSwapped 
    : (flags & TextCodec::IsByteSwapped) != 0;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::CharactersLoss.
    if (FOG_UNLIKELY(bufSize < 2)) return Error::Ok;

    uc16_0 = ((const uint16_t *)bufPtr)[0];
    uc16_1 = 0;

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM)) 
    { byteSwap = 0; srcCur -= oldStateSize; state->count = 0; goto cont; }

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM_Swapped))
    { byteSwap = 1; srcCur -= oldStateSize; state->count = 0; goto cont; }

    if (byteSwap) uc16_0 = Memory::bswap16(uc16_0);

    if (Char16::isLeadSurrogate(uc16_0))
    {
      if (FOG_UNLIKELY(bufSize < 4)) return Error::Ok;

      uc16_1 = ((const uint16_t *)bufPtr)[1];
      if (byteSwap) uc16_1 = Memory::bswap16(uc16_1);
    }
    else if (Char16::isTrailSurrogate(uc16_0))
    {
      goto invalidInput;
    }

    srcCur -= oldStateSize;
    state->count = 0;

    goto code;
  }
 
loop:
  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY((sysuint_t)(srcEnd - srcCur) < 2)) goto inputTruncated;

    uc16_0 = ((const uint16_t *)srcCur)[0];
    uc16_1 = 0;

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM)) 
    { byteSwap = 0; goto cont; }

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM_Swapped)) 
    { byteSwap = 1; goto cont; }
    
    if (FOG_UNLIKELY(byteSwap)) uc16_0 = Memory::bswap16(uc16_0);

    if (FOG_UNLIKELY(Char16::isLeadSurrogate(uc16_0)))
    {
      // Incomplete Input
      if (FOG_UNLIKELY((sysuint_t)(srcEnd - srcCur) < 4)) goto inputTruncated;

      uc16_1 = ((const uint16_t *)srcCur)[1];
      if (FOG_UNLIKELY(byteSwap)) uc16_1 = Memory::bswap16(uc16_1);
    }
    else if (Char16::isTrailSurrogate(uc16_0))
    {
      goto invalidInput;
    }

code:
    *dstCur++ = uc16_0;
    if (uc16_1) *dstCur++ = uc16_1;
   
cont:
    srcCur += 2;
    if (uc16_1) srcCur += 2;
    if (srcCur == srcEnd) break;
  }
 
  goto end;
 
invalidInput:
  err = Error::InvalidUnicode;
  goto end;
 
inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else {
    err = Error::InputTruncated;
  }

end:
  dst.xFinalize(dstCur);
  if (state) state->bomSwapped = byteSwap;
  return err;
}

err_t Device_UTF16::appendFromUtf32(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char32*)src) << 2;

  // Source Buffer
  const uint8_t* srcCur = (const uint8_t*)src;
  const uint8_t* srcEnd = (const uint8_t*)srcCur + srcBytes;
  const uint8_t* srcEndMinus3 = srcEnd - 3;

  // Destination Buffer
  sysuint_t oldDestLength = dst.length();
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = srcBytes + 4;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  uint16_t* dstCur = (uint16_t*)dst.xData() + dst.length();
  uint16_t* dstEnd = (uint16_t*)dst.xData() + dst.capacity();

  // Characters
  uint32_t uc;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::IncompleteInput.
    if (FOG_UNLIKELY(bufSize < 4)) return Error::Ok;

    srcCur -= oldStateSize;
    state->count = 0;

    uc = *(const uint32_t*)bufPtr;
    goto code;
  }

  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus3)) goto inputTruncated;

    uc = *(const uint32_t*)srcCur;
code:
    // 16 bit
    if (FOG_LIKELY(uc < 0x10000))
    {
      *dstCur++ = (uint16_t)uc;
    }
    // 32 bit (Surrogate Pair)
    else if (uc < MaxCodePoint)
    {
      uc -= 0x10000;
      dstCur[0] = (uint16_t)((uc >> 10) + 0xD800);
      dstCur[1] = (uint16_t)((uc & 0x03FF) + 0xDC00);
      dstCur += 2;
    }
    // Illegal
    else
    {
      goto invalidInput;
    }

cont:
    srcCur += 4;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }
  goto end;

invalidInput:
  err = Error::InvalidUnicode;
  goto end;

inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
    state->count = bufSize;
  }
  else {
    err = Error::InputTruncated;
  }

end:
  dst.xFinalize((char*)dstCur);

  // Byteswap
  if (flags & TextCodec::IsByteSwapped)
  {
    dstCur = (uint16_t *)(dst.xData() + oldDestLength);
    dstEnd = (uint16_t *)(dst.xData() + dst.length());

    while (dstCur < dstEnd) *dstCur++ = Memory::bswap16(*dstCur);
  }

  return err;
}

err_t Device_UTF16::appendToUtf32(
  String32& dst, const void* src, sysuint_t srcBytes, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char16*)(src)) << 1;
 
  const uint8_t* srcCur = (uint8_t*)(src);
  const uint8_t* srcEnd = srcCur + (srcBytes);
 
  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (srcBytes >> 1) + 1;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  Char32* dstCur = dst.xData() + dst.length(); 
  Char32* dstEnd = dst.xData() + dst.capacity();

  // Characters
  uint32_t uc;
  uint16_t uc16_0;
  uint16_t uc16_1;
 
  // Byteswap
  uint32_t byteSwap = state 
    ? state->bomSwapped 
    : (flags & TextCodec::IsByteSwapped) != 0;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::CharactersLoss.
    if (FOG_UNLIKELY(bufSize < 2)) return Error::Ok;

    uc16_0 = ((const uint16_t *)bufPtr)[0];

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM)) 
    { byteSwap = 0; srcCur -= oldStateSize; state->count = 0; goto cont; }

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM_Swapped))
    { byteSwap = 1; srcCur -= oldStateSize; state->count = 0; goto cont; }

    if (byteSwap) uc16_0 = Memory::bswap16(uc16_0);

    if (Char16::isLeadSurrogate(uc16_0))
    {
      if (FOG_UNLIKELY(bufSize < 4)) return Error::Ok;

      uc16_1 = ((const uint16_t *)bufPtr)[1];
      if (byteSwap) uc16_1 = Memory::bswap16(uc16_1);
      uc = 0x10000 + 
           (((uint32_t)uc16_0 - LeadSurrogateMin) << 10) + 
           ( (uint32_t)uc16_1 - (LeadSurrogateMax + 1));
    }
    else if (Char16::isTrailSurrogate(uc16_0))
    {
      goto invalidInput;
    }
    else
    {
      uc = uc16_0;
    }

    srcCur -= oldStateSize;
    state->count = 0;

    goto code;
  }
 
loop:
  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY((sysuint_t)(srcEnd - srcCur) < 2)) goto inputTruncated;

    uc16_0 = ((const uint16_t *)srcCur)[0];

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM)) 
    { byteSwap = 0; goto cont; }

    if (FOG_UNLIKELY(uc16_0 == UTF16_BOM_Swapped)) 
    { byteSwap = 1; goto cont; }
    
    if (FOG_UNLIKELY(byteSwap)) uc16_0 = Memory::bswap16(uc16_0);

    if (FOG_UNLIKELY(Char16::isLeadSurrogate(uc16_0)))
    {
      // Incomplete Input
      if (FOG_UNLIKELY((sysuint_t)(srcEnd - srcCur) < 4)) goto inputTruncated;

      uc16_1 = ((const uint16_t *)srcCur)[1];
      if (FOG_UNLIKELY(byteSwap)) uc16_1 = Memory::bswap16(uc16_1);

      uc = 0x10000 + 
           (((uint32_t)uc16_0 - LeadSurrogateMin) << 10) + 
           ( (uint32_t)uc16_1 - (LeadSurrogateMax + 1));
    }
    else if (Char16::isTrailSurrogate(uc16_0))
    {
      goto invalidInput;
    }
    else
    {
      uc = uc16_0;
    }

code:
    *dstCur++ = uc;
   
cont:
    srcCur += uc > 0xFFFF ? 4 : 2;
    if (srcCur == srcEnd) break;
  }
 
  goto end;
 
invalidInput:
  err = Error::InvalidUnicode;
  goto end;
 
inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else {
    err = Error::InputTruncated;
  }
 
end:
  dst.xFinalize(dstCur);
  if (state) state->bomSwapped = byteSwap;
  return err;
}

static TextCodec::Device* Device_UTF16_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new Device_UTF16(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - Device_UCS2]
// ============================================================================

// UCS2
//
// UCS2 encoding is still used in embedded devices, Win2000 and others. In 
// future it will be probably substituted by UTF-16 or better UTF-32/UCS-4.

struct FOG_HIDDEN Device_UCS2 : public Device_Base
{
  Device_UCS2(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUtf32(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;
  virtual err_t appendToUtf32(
    String32& dst, const void* src, sysuint_t srcBytes, State* state) const;
};

Device_UCS2::Device_UCS2(uint32_t code, uint32_t flags, const char* mime) :
  Device_Base(code, flags, mime, NULL)
{
}

err_t Device_UCS2::appendFromUtf32(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char32*)src) << 2;

  const uint8_t* srcCur = (const uint8_t*)src;
  const uint8_t* srcEnd = (const uint8_t*)srcCur + srcBytes;
  const uint8_t* srcEndMinus3 = srcEnd - 3;

  // Destination Buffer
  sysuint_t oldDestLength = dst.length();
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (srcBytes >> 1) + 2;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  uint16_t* dstCur = (uint16_t*)(dst.xData() + dst.length());
  uint16_t* dstEnd = (uint16_t*)(dst.xData() + dst.capacity());

  // Replacement
  String8 rbuf;
  if (replacer == NULL) replacer = TextCodec_defaultReplacer;

  // Characters
  uint32_t uc;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::IncompleteInput.
    if (FOG_UNLIKELY(bufSize < 4)) return Error::Ok;

    srcCur -= oldStateSize;
    state->count = 0;

    uc = *(const uint32_t*)bufPtr;
    goto code;
  }

  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus3)) goto inputTruncated;

    uc = *(const uint32_t*)srcCur;
code:
    // 16 bit
    if (FOG_LIKELY(uc < 0x10000))
      *dstCur++ = (uint16_t)uc;
    // Illegal
    else
      goto invalidInput;

cont:
    srcCur += 4;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }

  goto end;

invalidInput:
  err = Error::InvalidUnicode;
  goto end;

inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else {
    err = Error::InputTruncated;
  }
  goto end;

replace:
  dst.xFinalize((char*)dstCur);

  err = replacer(rbuf, Char32(uc));
  if (err) goto end2;

  dst.append(Ascii8(rbuf));

  growSize = ((sysuint_t)(srcEnd - srcCur) >> 1);

  err = dst.reserve(dst.length() + growSize);
  if (err) goto end2;

  dstCur = (uint16_t*)(dst.xData() + dst.length());
  dstEnd = (uint16_t*)(dst.xData() + dst.capacity());

  goto cont;

end:
  dst.xFinalize((char*)dstCur);

end2:
  // Byteswap
  if (flags & TextCodec::IsByteSwapped)
  {
    dstCur = (uint16_t *)(dst.xData() + oldDestLength);
    dstEnd = (uint16_t *)(dst.xData() + dst.length());

    while (dstCur < dstEnd) *dstCur++ = Memory::bswap16(*dstCur);
  }

  return err;
}

err_t Device_UCS2::appendToUtf32(
  String32& dst, const void* src, sysuint_t srcBytes, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char16*)(src)) << 1;
 
  const uint8_t* srcCur = (uint8_t*)(src);
  const uint8_t* srcEnd = srcCur + (srcBytes);

  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (srcBytes >> 1) + 1;
 
  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  Char32* dstCur = dst.xData() + dst.length();

  // Characters
  uint16_t uc;

  // Byteswap
  uint32_t byteSwap = state
    ? state->bomSwapped
    : (flags & TextCodec::IsByteSwapped) != 0;
 
  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::CharactersLoss.
    if (FOG_UNLIKELY(bufSize < 2)) return Error::Ok;

    uc = ((const uint16_t *)bufPtr)[0];

    if (FOG_UNLIKELY(uc == UTF16_BOM)) 
    { byteSwap = 0; srcCur -= oldStateSize; state->count = 0; goto cont; }

    if (FOG_UNLIKELY(uc == UTF16_BOM_Swapped))
    { byteSwap = 1; srcCur -= oldStateSize; state->count = 0; goto cont; }

    if (byteSwap) uc = Memory::bswap16(uc);

    if (Char16::isPair(uc))
    {
      goto invalidInput;
    }

    srcCur -= oldStateSize;
    state->count = 0;

    goto code;
  }
 
loop:
  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY((sysuint_t)(srcEnd - srcCur) < 2)) goto inputTruncated;

    uc = ((const uint16_t *)srcCur)[0];

    if (FOG_UNLIKELY(uc == UTF16_BOM)) 
    { byteSwap = 0; goto cont; }

    if (FOG_UNLIKELY(uc == UTF16_BOM_Swapped)) 
    { byteSwap = 1; goto cont; }
    
    if (FOG_UNLIKELY(byteSwap)) uc = Memory::bswap16(uc);

    if (FOG_UNLIKELY(Char16::isPair(uc)))
    {
      goto invalidInput;
    }

code:
    *dstCur++ = uc;
   
cont:
    srcCur += 2;
    if (srcCur == srcEnd) break;
  }
 
  goto end;
 
invalidInput:
  err = Error::InvalidUnicode;
  goto end;
 
inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else
  {
    err = Error::InputTruncated;
  }
 
end:
  dst.xFinalize(dstCur);
  if (state) state->bomSwapped = byteSwap;
  return err;
}

static TextCodec::Device* Device_UCS2_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new Device_UCS2(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - Device_UTF32]
// ============================================================================

struct FOG_HIDDEN Device_UTF32 : public Device_Base
{
  Device_UTF32(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUtf16(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;
  virtual err_t appendToUtf16(
    String16& dst, const void* src, sysuint_t srcBytes, State* state) const;

  virtual err_t appendFromUtf32(
    String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const;
  virtual err_t appendToUtf32(
    String32& dst, const void* src, sysuint_t srcBytes, State* state) const;
};

Device_UTF32::Device_UTF32(uint32_t code, uint32_t flags, const char* mime) :
  Device_Base(code, flags, mime, NULL)
{
}

err_t Device_UTF32::appendFromUtf16(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char16*)src) << 1;

  // Source Buffer
  const uint8_t* srcCur = (const uint8_t*)src;
  const uint8_t* srcEnd = (const uint8_t*)srcCur + srcBytes;
  const uint8_t* srcEndMinus1 = srcEnd - 1;

  // Destination Buffer
  sysuint_t oldDestLength = dst.length();
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (srcBytes << 2) + 4;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  uint32_t* dstCur = (uint32_t*)(dst.xData() + dst.length());
  uint32_t* dstEnd = (uint32_t*)(dst.xData() + dst.capacity());

  // Characters
  uint16_t uc0 = 0;
  uint16_t uc1;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::IncompleteInput.
    if (FOG_UNLIKELY(bufSize < 2)) return Error::Ok;

    srcCur -= 2;
    state->count = 0;
    uc1 = *(const uint16_t*)bufPtr;
    goto code;
  }

  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus1)) goto inputTruncated;

    uc1 = *(const uint16_t*)srcCur;
code:
    // Surrogate
    if (uc0)
    {
      if (!Char16::isTrailSurrogate(uc1)) goto invalidInput;

      ((uint32_t*)dstCur)[0] = 0x10000 + 
           (((uint32_t)uc0 - LeadSurrogateMin) << 10) + 
           ( (uint32_t)uc1 - (LeadSurrogateMax + 1));
      uc0 = 0;
    }
    else if (Char16::isLeadSurrogate(uc1))
    {
      uc0 = uc1;
    }
    else
    {
      *dstCur++ = uc1;
    }

cont:
    srcCur += 2;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }

  // Incomplete
  if (uc0)
  {
    if (state)
    {
      ((uint16_t*)state->buffer)[0] = uc0;
      state->count = 2;
    }
    else
    {
      err = Error::InputTruncated;
    }
  }

  goto end;

invalidInput:
  err = Error::InvalidUnicode;
  goto end;

inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = 0;
    if (uc0) { ((uint16_t*)state->buffer)[0] = uc0; bufSize += 2; }
    state->buffer[bufSize] = *srcCur;
    state->count = bufSize+1;
  }
  else
  {
    err = Error::InputTruncated;
  }

end:
  dst.xFinalize((char*)dstCur);

  // Byteswap
  if (flags & TextCodec::IsByteSwapped)
  {
    dstCur = (uint32_t *)(dst.xData() + oldDestLength);
    dstEnd = (uint32_t *)(dst.xData() + dst.length());

    while (dstCur < dstEnd) *dstCur++ = Memory::bswap32(*dstCur);
  }

  return err;
}

err_t Device_UTF32::appendToUtf16(
  String16& dst, const void* src, sysuint_t srcBytes, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char32*)(src)) << 2;
 
  const uint8_t* srcCur = (uint8_t*)(src);
  const uint8_t* srcEnd = srcCur + (srcBytes);
  const uint8_t* srcEndMinus3 = srcEnd - 3;
 
  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (srcBytes >> 1) + 1;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  Char16* dstCur = dst.xData() + dst.length();

  // Characters
  uint32_t uc;

  // Byteswap
  uint32_t byteSwap = state
    ? state->bomSwapped 
    : (flags & TextCodec::IsByteSwapped) != 0;
 
  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::CharactersLoss.
    if (FOG_UNLIKELY(bufSize < 4))
    {
      return Error::Ok;
    }

    srcCur -= oldStateSize;
    state->count = 0;

    uc = ((const uint32_t *)bufPtr)[0];

    if (FOG_UNLIKELY(uc == UTF32_BOM)) 
    { byteSwap = 0; goto cont; }

    if (FOG_UNLIKELY(uc == UTF32_BOM_Swapped)) 
    { byteSwap = 1; goto cont; }

    if (byteSwap) uc = Memory::bswap32(uc);

    goto code;
  }
 
loop:
  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus3)) goto inputTruncated;

    uc = ((const uint32_t *)srcCur)[0];

    if (FOG_UNLIKELY(uc == UTF32_BOM))
    { byteSwap = 0; goto cont; }

    if (FOG_UNLIKELY(uc == UTF32_BOM_Swapped))
    { byteSwap = 1; goto cont; }

    if (byteSwap) uc = Memory::bswap32(uc);

    if (!Char32::isValid(uc)) goto invalidInput;

code:
    // 16 bit
    if (FOG_LIKELY(uc < 0x10000))
    {
      *dstCur++ = (uint16_t)uc;
    }
    else
    {
      uc -= 0x10000;
      dstCur[0] = (uint16_t)((uc >> 10) + 0xD800);
      dstCur[1] = (uint16_t)((uc & 0x03FF) + 0xDC00);
      dstCur += 2;
    }
   
cont:
    srcCur += 4;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }
 
  goto end;
 
invalidInput:
  err = Error::InvalidUnicode;
  goto end;
 
inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else
  {
    err = Error::InputTruncated;
  }
 
end:
  dst.xFinalize(dstCur);
  if (state) state->bomSwapped = byteSwap;
  return err;
}

err_t Device_UTF32::appendFromUtf32(
  String8& dst, const void* src, sysuint_t srcBytes, Replacer replacer, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char32*)src) << 2;

  const uint8_t* srcCur = (const uint8_t*)src;
  const uint8_t* srcEnd = (const uint8_t*)srcCur + srcBytes;
  const uint8_t* srcEndMinus3 = srcEnd - 3;

  // Destination Buffer
  sysuint_t oldDestLength = dst.length();
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = srcBytes + 4;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  uint32_t* dstCur = (uint32_t*)(dst.xData() + dst.length());

  // Characters
  uint32_t uc;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::IncompleteInput.
    if (FOG_UNLIKELY(bufSize < 4)) return Error::Ok;

    srcCur -= oldStateSize;
    state->count = 0;

    uc = *(const uint32_t*)bufPtr;
    goto code;
  }

  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus3)) goto inputTruncated;

    uc = *(const uint32_t*)srcCur;
code:
    // Character
    if (FOG_LIKELY(uc < MaxCodePoint))
    {
      *dstCur++ = uc;
    }
    // Illegal
    else
    {
      goto invalidInput;
    }

    srcCur += 4;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }

  goto end;

invalidInput:
  err = Error::InvalidUnicode;
  goto end;

inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else
  {
    err = Error::InputTruncated;
  }

end:
  dst.xFinalize((char*)dstCur);

  // Byteswap
  if (flags & TextCodec::IsByteSwapped)
  {
    dstCur = (uint32_t *)(dst.xData() + oldDestLength);
    for (sysuint_t i = dst.length() - oldDestLength; i; i--)
      *dstCur++ = Memory::bswap32(*dstCur);
  }

  return err;
}

err_t Device_UTF32::appendToUtf32(
  String32& dst, const void* src, sysuint_t srcBytes, State* state) const
{
  // Source Buffer
  if (srcBytes == DetectLength) srcBytes = StringUtil::len((const Char32*)(src)) << 2;
 
  const uint8_t* srcCur = (uint8_t*)(src);
  const uint8_t* srcEnd = srcCur + (srcBytes);
  const uint8_t* srcEndMinus3 = srcEnd - 3;
 
  // Destination Buffer
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (srcBytes >> 2) + 1;

  err_t err = dst.reserve(dst.length() + growSize);
  if (err) return err;

  Char32* dstCur = dst.xData() + dst.length();

  // Characters
  uint32_t uc;

  // Byteswap
  uint32_t byteSwap = state
    ? state->bomSwapped 
    : (flags & TextCodec::IsByteSwapped) != 0;
 
  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = state->buffer;
    sysuint_t bufSize = TextCodec_addToState(state, srcCur, srcEnd);

    // Incomplete Input, we are returning Error::Ok, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return TextCodec::CharactersLoss.
    if (FOG_UNLIKELY(bufSize < 4))
    {
      return Error::Ok;
    }

    srcCur -= oldStateSize;
    state->count = 0;

    uc = ((const uint32_t *)bufPtr)[0];

    if (FOG_UNLIKELY(uc == UTF32_BOM)) 
    { byteSwap = 0; goto cont; }

    if (FOG_UNLIKELY(uc == UTF32_BOM_Swapped)) 
    { byteSwap = 1; goto cont; }

    if (byteSwap) uc = Memory::bswap32(uc);

    goto code;
  }
 
loop:
  for (;;)
  {
    // Incomplete Input
    if (FOG_UNLIKELY(srcCur >= srcEndMinus3)) goto inputTruncated;

    uc = ((const uint32_t *)srcCur)[0];

    if (FOG_UNLIKELY(uc == UTF32_BOM))
    { byteSwap = 0; goto cont; }

    if (FOG_UNLIKELY(uc == UTF32_BOM_Swapped))
    { byteSwap = 1; goto cont; }

    if (byteSwap) uc = Memory::bswap32(uc);

    if (!Char32::isValid(uc)) goto invalidInput;

code:
    *dstCur++ = uc;
   
cont:
    srcCur += 4;
    if (FOG_UNLIKELY(srcCur == srcEnd)) break;
  }
 
  goto end;
 
invalidInput:
  err = Error::InvalidUnicode;
  goto end;
 
inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
  }
  else
  {
    err = Error::InputTruncated;
  }
 
end:
  dst.xFinalize(dstCur);
  if (state) state->bomSwapped = byteSwap;
  return err;
}

static TextCodec::Device* Device_UTF32_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new Device_UTF32(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - Classes]
// ============================================================================

struct TextCodec_Class
{
  typedef TextCodec::Device* (*CreateFn)(uint32_t code, uint32_t flags, const char* mime, void* table);

  CreateFn create;
  const char* mime;
  uint32_t code;
  uint32_t flags;
  void* tables;
};

static const TextCodec_Class TextCodec_class[] =
{
  { Device_Null_create, "NONE\000", 
    TextCodec::None, TextCodec::IsNull, NULL },
  { Device_UTF8_create, "UTF-8\000", 
    TextCodec::UTF8, TextCodec::IsUnicode | TextCodec::Is8Bit | TextCodec::IsVariableSize, NULL },
#if FOG_BYTE_ORDER == FOG_LITTLE_ENDIAN
  { Device_UTF16_create, "UTF-16LE\000" "UTF-16\000",
    TextCodec::UTF16LE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize, NULL },
  { Device_UTF16_create, "UTF-16BE\000",
    TextCodec::UTF16BE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize | TextCodec::IsByteSwapped, NULL },
  { Device_UTF32_create, "UTF-32LE\000" "UTF-32\000" "UCS-4LE\000" "UCS-4\000",
    TextCodec::UTF32LE, TextCodec::IsUnicode | TextCodec::Is32Bit, NULL },
  { Device_UTF32_create, "UTF-32BE\000",
    TextCodec::UTF32BE, TextCodec::IsUnicode | TextCodec::Is32Bit | TextCodec::IsByteSwapped, NULL },
  { Device_UCS2_create, "UCS-2LE\000" "UCS-2\000", 
    TextCodec::UCS2LE, TextCodec::IsUnicode | TextCodec::Is16Bit, NULL },
  { Device_UCS2_create, "UCS-2BE\000", 
    TextCodec::UCS2BE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsByteSwapped, NULL },
#else
  { Device_UTF16_create, "UTF-16BE\000" "UTF-16\000", 
    TextCodec::UTF16BE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize, NULL },
  { Device_UTF16_create, "UTF-16LE\000",
    TextCodec::UTF16LE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize | TextCodec::IsByteSwapped, NULL },
  { Device_UTF32_create, "UTF-32BE\000" "UTF-32\000" "UCS-4BE\000" "UCS-4\000",
    TextCodec::UTF32BE, TextCodec::IsUnicode | TextCodec::Is32Bit, NULL },
  { Device_UTF32_create, "UTF-32LE\000" "UCS-4LE\000",
    TextCodec::UTF32LE, TextCodec::IsUnicode | TextCodec::Is32Bit | TextCodec::IsByteSwapped, NULL },
  { Device_UCS2_create, "UCS-2BE\000" "UCS-2\000", 
    TextCodec::UCS2BE, TextCodec::IsUnicode | TextCodec::Is16Bit  , NULL },
  { Device_UCS2_create, "UCS-2LE\000",
    TextCodec::UCS2LE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsByteSwapped, NULL },
#endif // FOG_BYTE_ORDER
  { Device_8Bit_create, "ISO-8859-1\000" "8859-1\000" "LATIN1\000" "L1\000" "ISO-IR-100\000" "CP819\000" "IBM819\000" "819\000", 
    TextCodec::ISO8859_1, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_1 },
  { Device_8Bit_create, "ISO-8859-2\000" "8859-2\000" "LATIN2\000" "L2\000" "ISO-IR-101\000",
    TextCodec::ISO8859_2, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_2 },
  { Device_8Bit_create, "ISO-8859-3\000" "8859-3\000" "LATIN3\000" "L3\000" "ISO-IR-109\000",
    TextCodec::ISO8859_3, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_3 },
  { Device_8Bit_create, "ISO-8859-4\000" "8859-4\000" "LATIN4\000" "L4\000" "ISO-IR-110\000",
    TextCodec::ISO8859_4, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_4 },
  { Device_8Bit_create, "ISO-8859-5\000" "8859-5\000" "CYRILLIC\000" "ISO-IR-144\000",
    TextCodec::ISO8859_5, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_5 },
  { Device_8Bit_create, "ISO-8859-6\000" "8859-6\000" "ISO-8859-6-I\000" "ECMA-114\000" "ASMO-708\000" "ARABIC\000" "ISO-IR-127\000",
    TextCodec::ISO8859_6, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_6 },
  { Device_8Bit_create, "ISO-8859-7\000" "8859-7\000" "ECMA-118\000" "GREEK\000" "ISO-IR-126\000",
    TextCodec::ISO8859_7, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_7 },
  { Device_8Bit_create, "ISO-8859-8\000" "8859-8\000" "ISO-8859-8-I\000" "ISO-IR-138\000" "HEBREW\000",
    TextCodec::ISO8859_8, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_8 },
  { Device_8Bit_create, "ISO-8859-9\000" "8859-9\000" "ISO-IR-148\000" "LATIN5\000" "L5\000",
    TextCodec::ISO8859_9, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_9 },
  { Device_8Bit_create, "ISO-8859-10\000" "8859-10\000" "ISO-IR-157\000" "LATIN6\000" "L6\000" "ISO-8859-10:1992\000",
    TextCodec::ISO8859_10, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_10 },
  { Device_8Bit_create, "ISO-8859-11\000" "8859-11\000" "TIS-620\000",
    TextCodec::ISO8859_11, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_11 },
  { Device_8Bit_create, "ISO-8859-13\000" "8859-13\000",
    TextCodec::ISO8859_13, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_13 },
  { Device_8Bit_create, "ISO-8859-14\000" "8859-14\000" "ISO-IR-199\000" "LATIN8\000" "L8\000" "ISO-CELTIC\000",
    TextCodec::ISO8859_14, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_14 },
  { Device_8Bit_create, "ISO-8859-16\000" "8859-16\000" "ISO-IR-226\000" "LATIN10\000" "L10\000",
    TextCodec::ISO8859_16, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_16 },
  { Device_8Bit_create, "CP850\000" "IBM850\000" "850\000",
    TextCodec::CP850, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_850 },
  { Device_8Bit_create, "CP866\000" "IBM866\000" "866\000",
    TextCodec::CP866, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_866 },
  { Device_8Bit_create, "CP874\000" "IBM874\000" "874\000",
    TextCodec::CP874, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_874 },
  { Device_8Bit_create, "CP1250\000" "WINDOWS-1250\000" "1250\000",
    TextCodec::CP1250, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1250 },
  { Device_8Bit_create, "CP1251\000" "WINDOWS-1251\000" "1251\000",
    TextCodec::CP1251, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1251 },
  { Device_8Bit_create, "CP1252\000" "WINDOWS-1252\000" "1252\000",
    TextCodec::CP1252, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1252 },
  { Device_8Bit_create, "CP1253\000" "WINDOWS-1253\000" "1253\000",
    TextCodec::CP1253, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1253 },
  { Device_8Bit_create, "CP1254\000" "WINDOWS-1254\000" "1254\000",
    TextCodec::CP1254, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1254 },
  { Device_8Bit_create, "CP1255\000" "WINDOWS-1255\000" "1255\000",
    TextCodec::CP1255, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1255 },
  { Device_8Bit_create, "CP1256\000" "WINDOWS-1256\000" "1256\000",
    TextCodec::CP1256, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1256 },
  { Device_8Bit_create, "CP1257\000" "WINDOWS-1257\000" "1257\000",
    TextCodec::CP1257, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1257 },
  { Device_8Bit_create, "CP1258\000" "WINDOWS-1258\000" "1258\000",
    TextCodec::CP1258, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1258 },
  { Device_8Bit_create, "APPLE-ROMAN\000",
    TextCodec::AppleRoman, TextCodec::Is8Bit, (void*)TextCodec_Table_APPLE_ROMAN },
  { Device_8Bit_create, "KOI8-R\000",
    TextCodec::KOI8R, TextCodec::Is8Bit, (void*)TextCodec_Table_KOI8R },
  { Device_8Bit_create, "KOI8-U\000" "KOI8-RU\000",
    TextCodec::KOI8U, TextCodec::Is8Bit, (void*)TextCodec_Table_KOI8U },
  { Device_8Bit_create, "WINSAMI2\000" "WS2\000",
    TextCodec::WinSami2, TextCodec::Is8Bit, (void*)TextCodec_Table_WINSAMI_2 },
  { Device_8Bit_create, "ROMAN8\000" "HP-ROMAN8\000",
    TextCodec::Roman8, TextCodec::Is8Bit, (void*)TextCodec_Table_ROMAN_8 },
  { Device_8Bit_create, "ARMSCII-8\000",
    TextCodec::Armscii8, TextCodec::Is8Bit, (void*)TextCodec_Table_ARMSCII_8 },
  { Device_8Bit_create, "GEORGIAN-ACADEMY\000",
    TextCodec::GeorgianAcademy, TextCodec::Is8Bit, (void*)TextCodec_Table_GEORGIAN_ACADEMY },
  { Device_8Bit_create, "GEORGIAN-PS\000",
    TextCodec::GeorgianPS, TextCodec::Is8Bit, (void*)TextCodec_Table_GEORGIAN_PS }
};

// MIME searching
//
// First string in mime is encoding name, all other strings are aliases
// zero terminator means that string ends, but two zero terminators means
// that aliases list ends.
//
// Mime compare function that ignores case, ' ', '-' and '_'.
static bool TextCodec_mimeCompare(const char* mime, const char* str, sysuint_t length)
{
  const char* strCur;
  const char* strEnd = str + length;

__repeat_all:
  strCur = str;
  for (;;)
  {
    char ch;
    char mime_ch;

    // Get string character
__repeat_string:
    ch = (strCur == strEnd) ? 0 : (char)Fog::CType::toAsciiLower((uint8_t)*strCur++);
    if (ch == '_'|| ch == '-' || ch == ' ') goto __repeat_string;

    // Get mime character
__repeat_mime:
    mime_ch = (char)Fog::CType::toAsciiLower((uint8_t)*mime++);
    if (mime_ch == '_'|| mime_ch == '-' || mime_ch == ' ') goto __repeat_mime;

    if (ch != mime_ch)
    {
      // NOT EQUAL - Go to end of mime string
      while (*mime) mime++;

      // Not two zero terminators => Try next alias
      if (*++mime) goto __repeat_all;

      // Not found in this MIME and ALIASes
      return false;
    }
    if (!ch)
      // EQUAL
      return true;
  }
}

static const char* TextCodec_getCodeset(void)
{
#if defined(FOG_OS_WINDOWS)
  // Windows hasn't nl_langinto(CODESET), but we can use setlocale()
  // that returns "Language_Country.CODEPAGE
  const char* codeset = setlocale(LC_ALL, NULL); // get locale...
  const char* chr = strchr(codeset, '.');
  if (chr)
  {
    // Text codec knows 1250, 1251, ...
    return chr + 1;
  }
  else
  {
    fog_stderr_msg("Fog::TextCodec", "getCodesetPrivate", "Can't get system codeset\n");
    return "ISO-8859-1"; /* sorry */
  }
#else
  // Must be called after setlocale("") that's called from Core/Std.cpp
  return nl_langinfo(CODESET);
#endif // FOG_OS_WINDOWS
}

static TextCodec::Device* TextCodec_deviceInstances[TextCodec::Invalid];

static TextCodec::Device* TextCodec_getDevice(uint32_t code)
{
  if (code >= TextCodec::Invalid) code = 0;

  TextCodec::Device** _ptr = &TextCodec_deviceInstances[code];
  TextCodec::Device* v = AtomicOperation<TextCodec::Device*>::get(_ptr);

  enum { Creating = 1 };

  // Already created, just return it
  if (v != NULL && v != (TextCodec::Device*)Creating) goto ret;

  // Create instance
  if (AtomicOperation<TextCodec::Device*>::cmpXchg(_ptr, 
    (TextCodec::Device*)NULL, 
    (TextCodec::Device*)Creating))
  {
    const TextCodec_Class &c = TextCodec_class[code];
    v = c.create(c.code, c.flags, c.mime, c.tables);
    AtomicOperation<TextCodec::Device*>::set(_ptr, v);
    goto ret;
  }

  // Race.
  // This is very rare situation, but it can happen!
  while ((v = AtomicOperation<TextCodec::Device*>::get(_ptr)) == (TextCodec::Device*)Creating)
  {
    Thread::_yield();
  }

ret:
  v->ref();
  return v;
}

// ============================================================================
// [Fog::TextCodec]
// ============================================================================

TextCodec::TextCodec() :
  _d(((TextCodec*)sharedBuiltIn)[BuiltInNull]._d->ref())
{
}

TextCodec::TextCodec(const TextCodec& other) :
  _d(other._d->ref())
{
}

TextCodec::TextCodec(Device* d) :
  _d(d)
{
}

TextCodec::~TextCodec()
{
  _d->deref();
}

// [From]

TextCodec TextCodec::fromCode(uint32_t code)
{
  return TextCodec(TextCodec_getDevice(code));
}

TextCodec TextCodec::fromMime(const char* mime)
{
  sysuint_t i;
  sysuint_t mimeLength = strlen(mime);

  for (i = 0; i != FOG_ARRAY_SIZE(TextCodec_class); i++)
  {
    if (TextCodec_mimeCompare(TextCodec_class[i].mime, mime, mimeLength)) break;
  }

  return TextCodec::fromCode(i < FOG_ARRAY_SIZE(TextCodec_class) ? i : 0);
}

TextCodec TextCodec::fromMime(const String32& mime)
{
  if (mime.length() > 255) return TextCodec();

  char mime8[256];
  StringUtil::utf32ToLatin((Char8*)mime8, mime.cData(), mime.length());
  mime8[mime.length()] = '\0';

  return fromMime(mime8);
}

struct BomData
{
  uint32_t code;
  uint32_t size;
  uint8_t data[4];
};

TextCodec TextCodec::fromBom(const void* data, sysuint_t length)
{
  static const BomData bomData[] =
  {
    { UTF8   , 3, { 0xEF, 0xBB, 0xBF       } },
    { UTF16BE, 2, { 0xFE, 0xFF             } },
    { UTF16LE, 2, { 0xFF, 0xFE             } },
    { UTF32BE, 4, { 0x00, 0x00, 0xFE, 0xFF } },
    { UTF32LE, 4, { 0xFF, 0xFE, 0x00, 0x00 } }
  };

  uint32_t code = None;

  for (sysuint_t i = 0; i != FOG_ARRAY_SIZE(bomData); i++)
  {
    if (length >= bomData[i].size && memcmp(data, bomData[i].data, bomData[i].size) == 0)
    { code = bomData[i].code; break; }
  }

  return TextCodec::fromCode(code);
}

void TextCodec::free()
{
  AtomicBase::ptr_setXchg(&_d, ((TextCodec *)sharedBuiltIn)[BuiltInNull]._d->ref())->deref();
}

TextCodec& TextCodec::operator=(const TextCodec& other)
{
  AtomicBase::ptr_setXchg(&_d, other._d->ref())->deref();
  return *this;
}

err_t TextCodec::setCode(uint32_t code)
{
  err_t err = Error::Ok;
  if (code >= Invalid) { code = 0; err = Error::InvalidCodec; }

  AtomicBase::ptr_setXchg(&_d, TextCodec_getDevice(code))->deref();
  return err;
}

err_t TextCodec::setMime(const char* mime)
{
  *this = TextCodec::fromMime(mime);
  return code() == None ? (err_t)Error::InvalidCodec : (err_t)Error::Ok;
}

err_t TextCodec::setMime(const String32& mime)
{
  *this = TextCodec::fromMime(mime);
  return code() == None ? (err_t)Error::InvalidCodec : (err_t)Error::Ok;
}

// FromUtf16/32

err_t TextCodec::fromUtf16(
  String8& dst, const Stub8& src, Replacer replacer, State* state) const
{
  dst.clear();
  return _d->appendFromUtf16(
    dst, (const void*)src.str(), src.length(), replacer, state);
}

err_t TextCodec::fromUtf16(
  String8& dst, const String8& src, Replacer replacer, State* state) const
{
  // There is small 1*10^-100% probability that dst and src shares same data,
  // to handle this situation with minimum inlined code, we are manually increasing
  // reference count of src data and calling deref() at the end of this scope.
  String8::Data* src_d = src._d;
  src_d->refCount.inc();

  dst.clear();
  err_t err = _d->appendFromUtf16(
    dst, (const void*)src.cData(), src.length(), replacer, state);

  // Dereference (important step)
  src_d->deref();
  return err;
}

err_t TextCodec::fromUtf16(
  String8& dst, const String16& src, Replacer replacer, State* state) const
{
  dst.clear();
  return _d->appendFromUtf16(
    dst, (const void*)src.cData(), src.length() << 1, replacer, state);
}

err_t TextCodec::fromUtf32(
  String8& dst, const Stub8& src, Replacer replacer, State* state) const
{
  dst.clear();
  return _d->appendFromUtf32(
    dst, (const void*)src.str(), src.length(), replacer, state);
}

err_t TextCodec::fromUtf32(
  String8& dst, const String8& src, Replacer replacer, State* state) const
{
  // There is small 1*10^-100% probability that dst and src shares same data,
  // to handle this situation with minimum inlined code, we are manually increasing
  // reference count of src data and calling deref() at the end of this scope.
  String8::Data* src_d = src._d;
  src_d->refCount.inc();

  dst.clear();
  err_t err = _d->appendFromUtf32(
    dst, (const void*)src.cData(), src.length(), replacer, state);

  // Dereference (important step)
  src_d->deref();
  return err;
}

err_t TextCodec::fromUtf32(
  String8& dst, const String32& src, Replacer replacer, State* state) const
{
  dst.clear();
  return _d->appendFromUtf32(
    dst, (const void*)src.cData(), src.length() << 2, replacer, state);
}

// AppendFromUtf16/32

err_t TextCodec::appendFromUtf16(
  String8& dst, const Stub8& src, Replacer replacer, State* state) const
{
  return _d->appendFromUtf16(
    dst, (const void*)src.str(), src.length(), replacer, state);
}

err_t TextCodec::appendFromUtf16(
  String8& dst, const String8& src, Replacer replacer, State* state) const
{
  // There is small 1*10^-100% probability that dst and src shares same data,
  // to handle this situation with minimum inlined code, we are manually increasing
  // reference count of src data and calling deref() at the end of this scope.
  String8::Data* src_d = src._d;
  src_d->refCount.inc();

  err_t err = _d->appendFromUtf16(
    dst, (const void*)src.cData(), src.length(), replacer, state);

  // Dereference (important step)
  src_d->deref();
  return err;
}

err_t TextCodec::appendFromUtf16(
  String8& dst, const String16& src, Replacer replacer, State* state) const
{
  return _d->appendFromUtf16(
    dst, (const void*)src.cData(), src.length() << 1, replacer, state);
}

err_t TextCodec::appendFromUtf32(
  String8& dst, const Stub8& src, Replacer replacer, State* state) const
{
  return _d->appendFromUtf32(
    dst, (const void*)src.str(), src.length(), replacer, state);
}

err_t TextCodec::appendFromUtf32(
  String8& dst, const String8& src, Replacer replacer, State* state) const
{
  // There is small 1*10^-100% probability that dst and src shares same data,
  // to handle this situation with minimum inlined code, we are manually increasing
  // reference count of src data and calling deref() at the end of this scope.
  String8::Data* src_d = src._d;
  src_d->refCount.inc();

  err_t err = _d->appendFromUtf32(
    dst, (const void*)src.cData(), src.length(), replacer, state);

  // Dereference (important step)
  src_d->deref();
  return err;
}

err_t TextCodec::appendFromUtf32(
  String8& dst, const String32& src, Replacer replacer, State* state) const
{
  return _d->appendFromUtf32(
    dst, (const void*)src.cData(), src.length() << 2, replacer, state);
}

// ToUtf16/32

err_t TextCodec::toUtf16(String16& dst, const Stub8& src, State* state) const
{
  dst.clear();
  return _d->appendToUtf16(dst, (const void*)src.str(), src.length(), state);
}

err_t TextCodec::toUtf16(String16& dst, const String8& src, State* state) const
{
  dst.clear();
  return _d->appendToUtf16(dst, (const void*)src.cData(), src.length(), state);
}

err_t TextCodec::toUtf32(String32& dst, const Stub8& src, State* state) const
{
  dst.clear();
  return _d->appendToUtf32(dst, (const void*)src.str(), src.length(), state);
}

err_t TextCodec::toUtf32(String32& dst, const String8& src, State* state) const
{
  dst.clear();
  return _d->appendToUtf32(dst, (const void*)src.cData(), src.length(), state);
}

// AppendToUtf16/32

err_t TextCodec::appendToUtf16(String16& dst, const Stub8& src, State* state) const
{
  return _d->appendToUtf16(dst, (const void*)src.str(), src.length(), state);
}

err_t TextCodec::appendToUtf16(String16& dst, const String8& src, State* state) const
{
  return _d->appendToUtf16(dst, (const void*)src.cData(), src.length(), state);
}

err_t TextCodec::appendToUtf32(String32& dst, const Stub8& src, State* state) const
{
  return _d->appendToUtf32(dst, (const void*)src.str(), src.length(), state);
}

err_t TextCodec::appendToUtf32(String32& dst, const String8& src, State* state) const
{
  return _d->appendToUtf32(dst, (const void*)src.cData(), src.length(), state);
}

} // Fog namespace

// ============================================================================
// [Library Initializers]
// ============================================================================

FOG_INIT_DECLARE err_t fog_textcodec_init(void)
{
  Fog::Memory::zero(Fog::TextCodec_deviceInstances, sizeof(void*) * Fog::TextCodec::Invalid);

  Fog::TextCodec* addr = (Fog::TextCodec*)Fog::TextCodec::sharedBuiltIn;

  // Initialize null text codec.
  new (&addr[Fog::TextCodec::BuiltInNull]) 
    Fog::TextCodec(Fog::TextCodec::fromCode(Fog::TextCodec::None));

  // Initialize ASCII text codec.
  new (&addr[Fog::TextCodec::BuiltInAscii]) 
    Fog::TextCodec(Fog::TextCodec::fromCode(Fog::TextCodec::ISO8859_1));
  
  // Initialize local 8-bit text codec. If there was problem to initialize it,
  // we will use ASCII one.
  new (&addr[Fog::TextCodec::BuiltInLocal]) 
    Fog::TextCodec(Fog::TextCodec::fromMime(Fog::TextCodec_getCodeset()));
  if (addr[Fog::TextCodec::BuiltInLocal].isNull())
    addr[Fog::TextCodec::BuiltInLocal] = addr[Fog::TextCodec::BuiltInAscii];

  // Initialize UTF-8 text codec.
  new (&addr[Fog::TextCodec::BuiltInUTF8]) 
    Fog::TextCodec(Fog::TextCodec::fromCode(Fog::TextCodec::UTF8));
  
  // Initialize UTF-16 text codec.
  new (&addr[Fog::TextCodec::BuiltInUTF16]) 
    Fog::TextCodec(Fog::TextCodec::fromCode(Fog::TextCodec::UTF16));
  
  // Initialize UTF-32 text codec.
  new (&addr[Fog::TextCodec::BuiltInUTF32]) 
    Fog::TextCodec(Fog::TextCodec::fromCode(Fog::TextCodec::UTF32));

  return Error::Ok;
}

FOG_INIT_DECLARE void fog_textcodec_shutdown(void)
{
  Fog::TextCodec* addr = (Fog::TextCodec*)Fog::TextCodec::sharedBuiltIn;

  addr[Fog::TextCodec::BuiltInNull].~TextCodec();
  addr[Fog::TextCodec::BuiltInAscii].~TextCodec();
  addr[Fog::TextCodec::BuiltInLocal].~TextCodec();
  addr[Fog::TextCodec::BuiltInUTF8].~TextCodec();
  addr[Fog::TextCodec::BuiltInUTF16].~TextCodec();
  addr[Fog::TextCodec::BuiltInUTF32].~TextCodec();

  for (sysuint_t i = 0; i != FOG_ARRAY_SIZE(Fog::TextCodec_deviceInstances); i++)
  {
    if (Fog::TextCodec_deviceInstances[i])
      Fog::TextCodec_deviceInstances[i]->deref();
  }
}
