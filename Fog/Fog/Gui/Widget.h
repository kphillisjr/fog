// [Fog/Gui Library - Public API]
//
// [Licence]
// MIT, See COPYING file in package

// [Guard]
#ifndef _FOG_GUI_WIDGET_H
#define _FOG_GUI_WIDGET_H

// [Dependencies]
#include <Fog/Core/Event.h>
#include <Fog/Core/Hash.h>
#include <Fog/Core/List.h>
#include <Fog/Core/Lock.h>
#include <Fog/Core/Misc.h>
#include <Fog/Core/Object.h>
#include <Fog/Core/Thread.h>
#include <Fog/Core/Time.h>
#include <Fog/Graphics/Font.h>
#include <Fog/Graphics/Geometry.h>
#include <Fog/Graphics/Painter.h>
#include <Fog/Gui/Constants.h>
#include <Fog/Gui/Event.h>
#include <Fog/Gui/LayoutItem.h>

//! @addtogroup Fog_Gui
//! @{

namespace Fog {

// ============================================================================
// [Forward Declarations]
// ============================================================================

struct Layout;
struct GuiEngine;
struct GuiWindow;
struct Widget;
struct Window;

// ============================================================================
// [Fog::Widget]
// ============================================================================

//! @brief Base class for creating visual components that can be painted on the 
//! screen and that can catch events generated by windowing system.
//!
//! @c Fog::Widget is based on @c Fog::LayoutItem and layout item is based 
//! on @c Fog::Object. Layout item allows to very easy set or calculate layout 
//! metrics for each widget. And @c Fog::Object allows to use event mechanism
//! and object introspection that's implemented in Core library.
//!
//! @c Fog::Widget event base is a lot increased compared to @c Fog::Object. It 
//! contains these new event handlers:
//!  - <code>virtual void onStateChange(StateEvent* e)</code>
//!  - <code>virtual void onVisibilityChange(VisibilityEvent* e)</code>
//!  - <code>virtual void onConfigure(ConfigureEvent* e)</code>
//!  - <code>virtual void onFocus(FocusEvent* e)</code>
//!  - <code>virtual void onKey(KeyEvent* e)</code>
//!  - <code>virtual void onMouse(MouseEvent* e)</code>
//!  - <code>virtual void onNcPaint(PaintEvent* e)</code>
//!  - <code>virtual void onPaint(PaintEvent* e)</code>
//!  - <code>virtual void onClose(CloseEvent* e)</code>
//!
//! Widget state:
//!
//! Widget visibility is controled by @c StateEvent and can be changed 
//! via @c setState(), @c enable() and @c disable() methods. To check 
//! if widget is enabled use @c state() method.
//!
//! Widget visibility:
//!
//! Widget visibility is controled by @c VisibilityEvent and can be changed 
//! via @c setVisibility(), @c show() and @c hide() methods. To check if widget
//! is visible use @c visibility() method.
//!
//! Widget geometry:
//!
//! Widget geometry is most important thing for widgets. Widget position and size
//! is represented by @c Fog::Rect structure and can be retrieved by @c rect() method.
//! Coordinates that's retrieved represents widget position that's relative to it's
//! parent. If widget parent is @c NULL then this position is relative to the screen
//! coordinates (desktop window).
struct FOG_API Widget : public LayoutItem
{
  FOG_DECLARE_OBJECT(Widget, LayoutItem)

  // [Construction / Destruction]

  Widget(uint32_t createFlags = 0);
  virtual ~Widget();

  // [Hierarchy]

  //! @brief Returns @c true if element is root.
  FOG_INLINE bool isRoot() const { return _parent == NULL; }

  //! @brief Returns @c true if element has parent.
  FOG_INLINE bool hasParent() const { return _parent != NULL; }

  //! @brief Returns @c true if element has children.
  FOG_INLINE bool hasChildren() const { return !_children.isEmpty(); }

  FOG_INLINE List<Widget*> getChildren() const { return _children; }
  FOG_INLINE Widget* getParent() const { return _parent; }

  bool setParent(Widget* p);
  bool add(Widget* w);
  bool remove(Widget* w);

  virtual bool _add(sysuint_t index, Widget* w);
  virtual bool _remove(sysuint_t index, Widget* w);

  // [UIWindow]

  FOG_INLINE bool isUIWindow() const { return _uiWindow != NULL; }
  FOG_INLINE GuiWindow* getUIWindow() const { return _uiWindow; }

  GuiWindow* getClosestUIWindow() const;

  err_t createWindow(uint32_t createFlags = 0);
  err_t destroyWindow();

  String getWindowTitle() const;
  err_t setWindowTitle(const String& title);

  Image getWindowIcon() const;
  err_t setWindowIcon(const Image& icon);

  Point getWindowGranularity() const;
  err_t setWindowGranularity(const Point& pt);

  // [Geometry]

  //! @brief Get widget position relative to parent.
  FOG_INLINE const Point& getPosition() const { return _rect.getPosition(); }
  //! @brief Get widget size.
  FOG_INLINE const Size& getSize() const { return _rect.getSize(); }
  //! @brief Get widget bounding rectangle.
  FOG_INLINE const Rect& getRect() const { return _rect; }
  //! @brief Get widget origin.
  FOG_INLINE const Point& getOrigin() const { return _origin; }

  //! @brief Get widget left position, this method is equal to @c left().
  FOG_INLINE int getX() const { return _rect.x; }
  //! @brief Get widget top position, this method is equal to @c top().
  FOG_INLINE int getY() const { return _rect.y; }
  //! @brief Get widget width.
  FOG_INLINE int getWidth() const { return _rect.w; }
  //! @brief Get widget height.
  FOG_INLINE int getHeight() const { return _rect.h; }

  //! @brief Get widget left position, this method is equal to @c left().
  FOG_INLINE int getX1() const { return _rect.x; }
  //! @brief Get widget top position, this method is equal to @c top().
  FOG_INLINE int getY1() const { return _rect.y; }
  //! @brief Get widget right position, this method is equal to @c right().
  FOG_INLINE int getX2() const { return _rect.x + _rect.w; }
  //! @brief Get widget bottom position, this method is equal to @c bottom().
  FOG_INLINE int getY2() const { return _rect.y + _rect.h; }

  //! @brief Get widget left position, this method is equal to @c x1().
  FOG_INLINE int getLeft() const { return _rect.x; }
  //! @brief Get widget top position, this method is equal to @c y1().
  FOG_INLINE int getTop() const { return _rect.y; }
  //! @brief Get widget right position, this method is equal to @c x2().
  FOG_INLINE int getRight() const { return _rect.x + _rect.w; }
  //! @brief Get widget bottom position, this method is equal to @c y2().
  FOG_INLINE int getBottom() const { return _rect.y + _rect.h; }

  //! @brief Set widget position to @a pt.
  //!
  //! @note To set widget position and size together use @c setRect().
  void setPosition(const Point& pt);

  //! @brief Set the widget size to @a sz.
  //!
  //! @note To set widget position and size together use @c setRect().
  void setSize(const Size& size);

  //! @brief Set widget position and size to @a rect.
  void setRect(const Rect& rect);

  //! @brief Set widget origin to @a pt.
  void setOrigin(const Point& pt);

  //! @brief Set widget position to @a pt.
  //!
  //! This method is similar to @c setPosition().
  FOG_INLINE void move(const Point& pt) { setPosition(pt); }

  //! @brief Set widget size to @a size.
  //!
  //! This method is similar to @c setSize().
  FOG_INLINE void resize(const Size& size) { setSize(size); }

  bool worldToClient(Point* coords) const;
  bool clientToWorld(Point* coords) const;
  static bool translateCoordinates(Widget* to, Widget* from, Point* coords);

  // [Hit Testing]

  Widget* hitTest(const Point& pt) const;
  Widget* getChildAt(const Point& pt, bool recursive = false) const;

  // [Layout Of Widget]

  FOG_INLINE Layout* getLayout() const { return _layout; }

  void setLayout(Layout* layout);
  void deleteLayout();
  Layout* takeLayout();

  // [Layout Hints]

  virtual Size getSizeHint() const;
  virtual void setSizeHint(const Size& sizeHint);

  virtual Size getMinimumSize() const;
  virtual void setMinimumSize(const Size& minSize);

  virtual Size getMaximumSize() const;
  virtual void setMaximumSize(const Size& maxSize);

  // [Layout Policy]

  virtual uint32_t getLayoutPolicy() const;
  virtual void setLayoutPolicy(uint32_t policy);

  // [Layout Height For Width]

  virtual bool hasHeightForWidth() const;
  virtual int getHeightForWidth(int width) const;

  // [Layout State]

  virtual bool isLayoutDirty() const;
  virtual void invalidateLayout() const;

  // [State]

  //! @brief Get widget state, see @c WIDGET_STATE.
  FOG_INLINE uint32_t getState() const { return _state; }
  //! @brief Get whether widget is enabled.
  FOG_INLINE bool isEnabled() const { return _state == WIDGET_ENABLED; }
  //! @brief Get whether widget is enabled to parent.
  FOG_INLINE bool isEnabledToParent() const { return _state != WIDGET_DISABLED; }

  //! @brief Set widget state to @a val.
  void setEnabled(bool val = true);

  //! @brief Set widget state to @c WIDGET_ENABLED.
  FOG_INLINE void enable() { setEnabled(true); }
  //! @brief Set widget state to @c WIDGET_DISABLED.
  FOG_INLINE void disable() { setEnabled(false); }

  // [Visibility]

  //! @brief Returns widget visibility, see @c Visibility_Enum.
  FOG_INLINE uint32_t getVisibility() const { return _visibility; }

  //! @brief Get whether widget is visible.
  FOG_INLINE bool isVisible() const { return _visibility == WIDGET_VISIBLE; }
  //! @brief Get whether widget is visible to parent.
  FOG_INLINE bool isVisibleToParent() const { return _state != WIDGET_HIDDEN; }

  //! @brief Set widget visibility to @a val.
  void setVisible(bool val = true);
  
  //! @brief Show widget (set it's visibility to true).
  FOG_INLINE void show() { setVisible(true); }
  //! @brief Show widget (set it's visibility to false).
  FOG_INLINE void hide() { setVisible(false); }

  // [Orientation]

  //! @brief Returns widget orientation, see @c OrientationEnum.
  FOG_INLINE uint32_t orientation() const { return _orientation; }

  //! @brief Returns @c true if widget orientation is horizontal (default).
  FOG_INLINE bool isHorizontal() const { return orientation() == ORIENTATION_HORIZONTAL; }

  //! @brief Returns @c true if widget orientation is vertical.
  FOG_INLINE bool isVertical() const { return orientation() == ORIENTATION_VERTICAL; }

  //! @brief Sets widget orientation.
  void setOrientation(uint32_t val);

  //! @brief Sets widget orientation to horizontal (@c OrientationHorizontal).
  FOG_INLINE void setHorizontal() { setOrientation(ORIENTATION_HORIZONTAL); }

  //! @brief Sets widget orientation to vertical (@c OrientationVertical).
  FOG_INLINE void setVertical()  { setOrientation(ORIENTATION_VERTICAL); }

  // [Caret]

  // bool showCaret();
  // bool showCaret(const CaretProperties& properties);
  // bool hideCaret();

  // [Tab Order]

  //! @brief Returns widget tab order.
  FOG_INLINE int getTabOrder() const { return _tabOrder; }

  //! @brief Sets widget tab order.
  void setTabOrder(int tabOrder);

  // [Focus]

  FOG_INLINE uint32_t getFocusPolicy() const { return _focusPolicy; }

  void setFocusPolicy(uint32_t val);

  FOG_INLINE bool hasFocus() const { return _hasFocus; }

  virtual Widget* getFocusableWidget(int focusable);

  //! @brief Takes client focus for this widget.
  void takeFocus(uint32_t reason = FOCUS_REASON_NONE);

  void giveFocusNext(uint32_t reason = FOCUS_REASON_NONE);
  void giveFocusPrevious(uint32_t reason = FOCUS_REASON_NONE);

  Widget* _findFocus() const;

  // [Font]

  //! @brief Get widget font.
  FOG_INLINE Font getFont() const { return _font; }

  //! @brief Set widget font.
  void setFont(const Font& font);

  // [Update]

  enum UFlags
  {
    // [Widget Hierarchy]

    //! @brief Generic unspecified update flag.
    UFlagUpdate = (1 << 0),
    //! @brief Some child needs update (has generic update flag set).
    UFlagUpdateChild = (1 << 1),
    //! @brief Specifies to update everything for me and all children.
    UFlagUpdateAll = (1 << 2),

    // [Widget Geometry]

    UFlagUpdateGeometry = (1 << 3),

    // [Widget Screen]

    //! @brief Widget needs repaint.
    UFlagRepaintWidget = (1 << 4),
    //! @brief Caret needs repaint
    UFlagRepaintCaret = (1 << 5),

    //! @brief This flag is set if the widget will call @c Widget::paintParent().
    UFlagPaintParentRequired = (1 << 30),
    //! @Brief Internal flag used together with UFlagPaintParentRequired. Do not use.
    UFlagPaintParentDone = (1 << 31)
  };

  void update(uint32_t updateFlags);

  // [Repaint]

  enum RepaintFlags
  {
    RepaintWidget    = UFlagRepaintWidget,
    RepaintCaret     = UFlagRepaintCaret,
    RepaintAll       = RepaintWidget | RepaintCaret
  };

  void repaint(uint32_t repaintFlags);

  // [Event Handlers]

  //! @brief Child event handler.
  virtual void onChildAdd(ChildEvent* e);
  //! @brief Child event handler.
  virtual void onChildRemove(ChildEvent* e);
  //! @brief State event handler.
  virtual void onEnable(StateEvent* e);
  //! @brief State event handler.
  virtual void onDisable(StateEvent* e);
  //! @brief Visibility event handler.
  virtual void onShow(VisibilityEvent* e);
  //! @brief Visibility event handler.
  virtual void onHide(VisibilityEvent* e);
  //! @brief Configure event handler.
  virtual void onConfigure(ConfigureEvent* e);
  //! @brief Focus in event handler.
  virtual void onFocusIn(FocusEvent* e);
  //! @brief Focus out event handler.
  virtual void onFocusOut(FocusEvent* e);
  //! @brief Keyboard event handler.
  virtual void onKeyPress(KeyEvent* e);
  //! @brief Keyboard event handler.
  virtual void onKeyRelease(KeyEvent* e);
  //! @brief Mouse in event handler.
  virtual void onMouseIn(MouseEvent* e);
  //! @brief Mouse out event handler.
  virtual void onMouseOut(MouseEvent* e);
  //! @brief Mouse moveevent handler.
  virtual void onMouseMove(MouseEvent* e);
  //! @brief Mouse press event handler.
  virtual void onMousePress(MouseEvent* e);
  //! @brief Mouse release event handler.
  virtual void onMouseRelease(MouseEvent* e);
  //! @brief Click event handler.
  virtual void onClick(MouseEvent* e);
  //! @brief Double click event handler.
  virtual void onDoubleClick(MouseEvent* e);
  //! @brief Wheel event handler.
  virtual void onWheel(MouseEvent* e);
  //! @brief Selection event handler.
  virtual void onSelection(SelectionEvent* e);

  //! @brief Client paint handler.
  virtual void onPaint(PaintEvent* e);

  //! @brief Close event handler.
  virtual void onClose(CloseEvent* e);

  //! @brief Theme changed event handler.
  virtual void onThemeChange(ThemeEvent* e);

  //! @brief @c LayoutItem event handler.
  virtual void onLayout(LayoutEvent* e);

  // [Event Map]

  FOG_EVENT_BEGIN()
    FOG_EVENT_DEF(EV_CHILD_ADD           , onChildAdd        , ChildEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_CHILD_REMOVE        , onChildRemove     , ChildEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_ENABLE              , onEnable          , StateEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_DISABLE             , onDisable         , StateEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_DISABLE_BY_PARENT   , onDisable         , StateEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_SHOW                , onShow            , VisibilityEvent, OVERRIDE)
    FOG_EVENT_DEF(EV_HIDE                , onHide            , VisibilityEvent, OVERRIDE)
    FOG_EVENT_DEF(EV_HIDE_BY_PARENT      , onHide            , VisibilityEvent, OVERRIDE)
    FOG_EVENT_DEF(EV_CONFIGURE           , onConfigure       , ConfigureEvent , OVERRIDE)
    FOG_EVENT_DEF(EV_FOCUS_IN            , onFocusIn         , FocusEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_FOCUS_OUT           , onFocusOut        , FocusEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_KEY_PRESS           , onKeyPress        , KeyEvent       , OVERRIDE)
    FOG_EVENT_DEF(EV_KEY_RELEASE         , onKeyRelease      , KeyEvent       , OVERRIDE)
    FOG_EVENT_DEF(EV_MOUSE_IN            , onMouseIn         , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_MOUSE_OUT           , onMouseOut        , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_MOUSE_MOVE          , onMouseMove       , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_MOUSE_PRESS         , onMousePress      , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_MOUSE_RELEASE       , onMouseRelease    , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_CLICK               , onClick           , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_DOUBLE_CLICK        , onDoubleClick     , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_WHEEL               , onWheel           , MouseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_CLEAR_SELECTION     , onSelection       , SelectionEvent , OVERRIDE)
    FOG_EVENT_DEF(EV_SELECTION_REQUIRED  , onSelection       , SelectionEvent , OVERRIDE)
    FOG_EVENT_DEF(EV_PAINT               , onPaint           , PaintEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_CLOSE               , onClose           , CloseEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_THEME               , onThemeChange     , ThemeEvent     , OVERRIDE)
    FOG_EVENT_DEF(EV_LAYOUT_SET          , onLayout          , LayoutEvent    , OVERRIDE)
    FOG_EVENT_DEF(EV_LAYOUT_REMOVE       , onLayout          , LayoutEvent    , OVERRIDE)
  FOG_EVENT_END()

  // [Imaging]

protected:
  Widget* _parent;
  List<Widget*> _children;

  //! @brief Native window data.
  GuiWindow* _uiWindow;

  //! @brief Widget bounds.
  Rect _rect;
  //! @brief Widget origin.
  Point _origin;

  //! @brief Layout.
  Layout* _layout;

  uint8_t _layoutPolicy;
  bool _hasHeightForWidth;
  mutable bool _isLayoutDirty;

  //! @brief Link to child that was last focus.
  Widget* _lastFocus;
  Widget* _focusLink;

  uint32_t _uflags;

  //! @brief Widget state.
  uint32_t _state : 2;
  //! @brief Widget visibility.
  uint32_t _visibility : 2;
  //! @brief Widget focus policy
  uint32_t _focusPolicy : 4;
  //! @brief Focus.
  uint32_t _hasFocus : 1;
  //! @brief Widget orientation
  uint32_t _orientation : 1;
  //! @brief Reserved.
  uint32_t _reserved : 22;

  //! @brief Tab order.
  int _tabOrder;

  //! @brief Font (used to draw text in widget).
  Font _font;

private:
  friend struct Application;
  friend struct Window;
  friend struct GuiWindow;
  friend struct BaseGuiWindow;
  friend struct GuiEngine;
  friend struct BaseGuiEngine;
};

} // Fog namespace

//! @}

// ============================================================================
// [Private Widget Iterator used in GUI library]
//
// These macros are used internally, so don't use them in production code,
// please
// ============================================================================

#define FOG_WIDGET_TREE_ITERATOR(__name__, __basewidget__, __conditional__, __before_traverse__, __after_traverse__) \
        FOG_WIDGET_TREE_ITERATOR_EX(__name__, __basewidget__, __conditional__, __before_traverse__, __after_traverse__, {}, {})

#define FOG_WIDGET_TREE_ITERATOR_EX(__name__, __basewidget__, __conditional__, __before_traverse__, __after_traverse__, __push__, __pop__) \
  if ((__basewidget__)->_children.getLength()) \
  { \
    Fog::LocalStack<512> stack; \
    Fog::Widget** childCur = (Fog::Widget** )( __basewidget__->_children.getData() ); \
    Fog::Widget** childEnd = childCur + ( __basewidget__->_children.getLength() ); \
    Fog::Widget* child; \
    \
    for (;;) \
    { \
      child = *childCur; \
      \
      __before_traverse__ \
      \
      if (child->_children.getLength() && (__conditional__)) \
      { \
        \
        __push__ \
        \
        stack.push(childCur); \
        stack.push(childEnd); \
        \
        childCur = (Fog::Widget** )child->_children.getData(); \
        childEnd = childCur + child->_children.getLength(); \
        \
        continue; \
      } \
      \
__name__##_after: \
      \
      __after_traverse__ \
      \
__name__##_next: \
      \
      childCur++; \
      \
      if (FOG_UNLIKELY(childCur == childEnd)) \
      { \
        if (FOG_UNLIKELY(stack.isEmpty())) break; \
        \
        stack.pop(childEnd); \
        stack.pop(childCur); \
        \
        __pop__ \
        \
        goto __name__##_after; \
      } \
    } \
  }

#define FOG_WIDGET_TREE_ITERATOR_NEXT(__name__) goto __name__##_next

// [Guard]
#endif // _FOG_GUI_WIDGET_H
