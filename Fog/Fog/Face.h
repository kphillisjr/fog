// [Fog-Face Library - Public API]
//
// [License]
// MIT, See COPYING file in package

// [Guard]
#ifndef _FOG_FACE_H
#define _FOG_FACE_H

#if defined(_MSVC)
#pragma once
#endif // _MSVC

#if defined(FOG_DOXYGEN)

// ============================================================================
// [Fog - Face]
// ============================================================================

//! @defgroup Fog_Face Fog-Face
//!
//! Public classes and functions related to Fog-Face library. Fog-Face library
//! stands for 'Fog Accelerated C Extensions' and it was created to simplify
//! development of low-level multimedia functions used for digital signal
//! processing (computer graphics, audio, ...).

// ============================================================================
// [Fog - Face - Features]
// ============================================================================

//! @defgroup Fog_Face_Features Features configuration.
//! @ingroup Fog_Face
//!
//! This section contains various C++ defines that can be used to tweak the
//! binary code generated by the C++ compiler using Fog-Face library. The aim
//! is to provide single place where various choices can be defined, described
//! and autodetected.

// ============================================================================
// [Fog - Face - Byte]
// ============================================================================

//! @defgroup Fog_Face_Byte Packed BYTE Manipulation.
//! @ingroup Fog_Face
//! 
//! Collection of typedefs and functions to work with scalar bytes or bytes 
//! packed in 32-bit or 64-bit unsigned integers.
//!
//! Functions defined by @ref Fog_Face_Byte do operation on:
//!
//!   1. scalar bytes
//!      - all functions using prefix "b32_1x1"
//!   2. packed bytes in sparse format (0x00B100B0, etc...)
//!      - all functions using prefix "b32_XxX" or "b64_XxX"
//!   3. packed bytes in dense format (0xB3B2B1B0, etc...)
//!      - all functions using prefix "p32_XxX" or "p64_XxX"
//!
//! Data-type width is always described by the function prefix or type definition:
//!
//!   @c p32_1x3 - [XX.B2.B1.B0] - Packed three BYTEs stored in 32-bit unsigned
//!      integer.
//!   @c p32_1x4 - [B3.B2.B1.B0] - Packed four BYTEs stored in 32-bit unsigned
//!      integer.
//!
//!   @c b32_1x1 - [00.00.00.B0] - Scalar one BYTE stored in 32-bit unsigned
//!      integer.
//!   @c b32_1x2 - [00.B1.00.B0] - Unpacked two BYTEs stored in 32-bit unsigned
//!      integer.
//!
//!   @c b64_1x1 - [00.00.00.00.00.00.00.B0] - Scalar one BYTE stored in
//!      64-bit unsigned integer.
//!   @c b64_1x3 - [00.00.00.B2.00.B1.00.B0] - Unpacked three BYTEs stored in
//!      64-bit unsigned integer.
//!   @c b64_1x4 - [00.B3.00.B2.00.B1.00.B0] - Unpacked four BYTEs stored in
//!      64-bit unsigned integer.
//!
//! SIMD functionality is usually used to do manipulation with pixels, but the
//! use-case is not limited to computer graphics only.
//!
//!
//!
//! Data format for working with pixels in 32-bit mode:
//!
//!   - @c p32_1x4 b0 [0xAARRGGBB]
//!
//!   - @c b32_1x2 b0 [0x00RR00BB]
//!   - @c b32_1x2 b1 [0x00AA00GG]
//!
//!   - unpacked using b32_2x2Unpack0213(b0, b1, source);
//!   - packed using b32_2x2Pack0213(dest, b0, b1);
//!
//! Data format for working with pixels in 64-bit mode:
//!
//!   - @c p32_1x4 b0 [0xAARRGGBB]
//!
//!   - @c b64_1x4 b0 [0x00AA00GG00RR00BB]
//!
//!   - unpacked using b64_1x4Unpack0213(b0, source);
//!   - packed using b64_1x4Pack0213(dest, b0);
//!
//! The reason to not unpack bytes to 0x00AA00RR/00GG00BB is that it's more
//! expensive, unpacking even and odd bytes separately is simpler and working
//! with the data is the same. Notice that the position of bytes/pixels is
//! different to position when using MMX/SSE2 assembler.
//!
//! Function input/output parameter naming terminology:
//!
//!   - @c b32_1x1 - scalar at range of 0 to 255.
//!   - @c uint32_t - scalar at range of 0 to 256 or larger, depends to context.
//!   - @c b32_1x2 - packed two BYTEs in 32-bit unsigned integer.
//!   - @c b32_2x2 - packed two BYTEs in two 32-bit unsigned integers. These two
//!     integers are always passed/returned together.
//!   - @c b64_1x3 - packed three BYTEs in 64-bit unsigned integer.
//!   - @c b64_1x4 - packed four BYTEs in 64-bit unsigned integer.

#endif // FOG_DOXYGEN

// ============================================================================
// [Fog-Face Include Files]
// ============================================================================

#include <Fog/Face/Features.h>
#include <Fog/Face/FaceByte.h>

// [Guard]
#endif // _FOG_FACE_H
